<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>JBoss Data Virtualization Workshop</title>
<date>2015-11-23</date>
</info>
<chapter xml:id="_acknowlegdement">
<title>Acknowlegdement</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Version Number</simpara></entry>
<entry align="left" valign="top"><simpara>6.2.0</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Final as of</simpara></entry>
<entry align="left" valign="top"><simpara>Nov 23th, 2015</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Author(s)</simpara></entry>
<entry align="left" valign="top"><simpara>Cojan van Ballegooijen (<link xlink:href="http://twitter.com/cvanball">@cvanball</link>)
</simpara><simpara>Kenny Peeples (<link xlink:href="http://twitter.com/ossmentor">@ossmentor</link>)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Contributors</simpara></entry>
<entry align="left" valign="top"><simpara>Blaine Mincey
</simpara><simpara>Marco Rabelink
</simpara><simpara>Serhat Dirik</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</chapter>
<chapter xml:id="_workshop_version">
<title>Workshop version</title>
<simpara>The JBoss Data Virtualization Workshop is based on the following versions:</simpara>
<itemizedlist>
<listitem>
<simpara>JBoss Data Virtualization 6.2.0.GA</simpara>
</listitem>
<listitem>
<simpara>JBoss Developer Studio 8.1.0.GA</simpara>
</listitem>
<listitem>
<simpara>JBoss Developer Studio Integration Stack 8.0.3.GA</simpara>
</listitem>
<listitem>
<simpara>OpenShift Online v2</simpara>
</listitem>
</itemizedlist>
</chapter>
<chapter xml:id="_introduction">
<title>Introduction</title>
<simpara>Red Hat JBoss Data Virtualization, formerly known as Red Hat JBoss Enterprise Data Services Platform (EDS), is a complete data provisioning, federation, integration and management solution that enables organizations to gain actionable and unified information. Red Hat JBoss Data Virtualization enables agile data utilization in three steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Connect: Access data from multiple, heterogeneous data sources.</simpara>
</listitem>
<listitem>
<simpara>Compose: Create reusable, business-friendly logical data models and views by combining and transforming data.</simpara>
</listitem>
<listitem>
<simpara>Consume: Make unified data easily consumable through open standard interfaces.</simpara>
</listitem>
</orderedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/0.1-DV-Architecture.png"/>
</imageobject>
<textobject><phrase>0.1 DV Architecture</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Red Hat JBoss Data Virtualization (DV) includes:</simpara>
<itemizedlist>
<listitem>
<simpara>Tools for creating data views that are accessible through standard protocols. For those who are already familiar with Red Hat JBoss Data Virtualization one of the tools is the Teiid Designer plug-in for Red Hat JBoss Developer Studio (JBDS).</simpara>
</listitem>
<listitem>
<simpara>A robust runtime environment that provides enterprise-class performance, data integrity, and security (the Red Hat JBoss Data Virtualization Server, which executes as a process within the Red Hat JBoss Enterprise Application Platform (EAP)).</simpara>
</listitem>
<listitem>
<simpara>A repository for storing metadata (ModeShape)</simpara>
</listitem>
</itemizedlist>
<simpara>Red Hat JBoss Data Virtualization is based on the following community projects:</simpara>
<itemizedlist>
<listitem>
<simpara>Teiid (<link xlink:href="http://www.jboss.org/teiid">http://www.jboss.org/teiid</link>)</simpara>
</listitem>
<listitem>
<simpara>Teiid Designer (<link xlink:href="http://www.jboss.org/teiiddesigner">http://www.jboss.org/teiiddesigner</link>)</simpara>
</listitem>
<listitem>
<simpara>ModeShape (<link xlink:href="http://www.jboss.org/modeshape">http://www.jboss.org/modeshape</link>)</simpara>
</listitem>
</itemizedlist>
<simpara>The figure below depicts the architectural overview of Red Hat JBoss Data Virtualization:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/0.2-DV-Server.png"/>
</imageobject>
<textobject><phrase>0.2 DV Server</phrase></textobject>
</mediaobject>
</informalfigure>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="28*"/>
<colspec colname="col_2" colwidth="71*"/>
<thead>
<row>
<entry align="left" valign="top">Component</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Query Engine</simpara></entry>
<entry align="left" valign="top"><simpara>The heart of Red Hat JBoss Data Virtualization Server is a high-performance query engine that processes relational, XML, XQuery and procedural queries from federated datasources. Features include support for homogeneous schemas, heterogeneous schemas, transactions, and user defined</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Embedded</simpara></entry>
<entry align="left" valign="top"><simpara>An easy-to-use JDBC Driver that can embed the Query Engine in any Java application.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Server</simpara></entry>
<entry align="left" valign="top"><simpara>An enterprise ready, scalable, manageable, runtime for the Query Engine that runs inside JBoss EAP that provides additional security, fault-tolerance, and administrative features.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Connectors</simpara></entry>
<entry align="left" valign="top"><simpara>Red Hat JBoss Data Virtualization Server includes a rich set of Translators and Resource Adapters that enable access to a variety of sources, including most relational databases, web services, text files, and ldap.</simpara>
<simpara>Need data from a different source? Custom translators and resource adaptors can easily be developed.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Tools</simpara></entry>
<entry align="left" valign="top"><simpara>Red Hat JBoss Data Virtualization Server includes development and administration tools to</simpara>
<itemizedlist>
<listitem>
<simpara>Create - Use Teiid Designer to define virtual databases containing views, procedures or even dynamic XML documents.</simpara>
</listitem>
<listitem>
<simpara>Monitor &amp; Manage - Use the Management Console with  JBoss EAP or use the JBoss Data Virtualization JBoss Operations Network (JON) plugin to control any number of servers.</simpara>
</listitem>
<listitem>
<simpara>Script - Use the AdminShell to automate administrative and testing tasks.</simpara>
</listitem>
</itemizedlist></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section xml:id="_what_is_expected_of_you">
<title>What is expected of you</title>
<simpara>Please know that all care was made in creating this user guide, but all screen shots and steps along the way might be off by just a little so please be patient with any issues.</simpara>
<simpara>Please feel free to raise your hands if you have any questions. Also feel free to ask why it is you are doing something, or if something doesn&#8217;t feel right.</simpara>
</section>
<section xml:id="_prerequisites">
<title>Prerequisites</title>
<simpara>Please make sure that the following software is installed and configured:</simpara>
<itemizedlist>
<listitem>
<simpara>Minimal version 1.7 of OpenJDK or Oracle JDK</simpara>
</listitem>
<listitem>
<simpara>Git</simpara>
</listitem>
<listitem>
<simpara>PostgreSQL server, MariaDB server or MySQL server</simpara>
</listitem>
<listitem>
<simpara>If you are using a remote database the PostgreSQL, MariaDB or MySQL client tools should be used.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>Prerequisites with respect to PostgreSQL server, MariaDB server or MySQL server are optional. We will use the embedded H2 database which is installed in the JBoss DV environment by default as part of JBoss EAP for you convenience.</simpara>
</note>
</section>
<section xml:id="_setup_demo_environment">
<title>Setup demo environment</title>
<simpara>In order to use the labs we need to prepare one database. Out of the box we provide H2 embedded databases for your convinience. We provide some database SQL scripts as well for PostgreSQL, MariaDB and MySQL to load initial data into the database of your choice. In the next paragraph we will describe how to install the database and how to load the demo data into the database.</simpara>
<tip>
<simpara>Use the database you prefer, it&#8217;s not required to install one of the databases. By default we will use the H2 embedded database.</simpara>
</tip>
<section xml:id="_setup_postgresql_optional">
<title>Setup PostgreSQL (Optional)</title>
<simpara>Installation</simpara>
<simpara>The easiest way to install PostgreSQL is to use the pre-built binary packages which are available for a number of different operating systems. See <link xlink:href="http://www.postgresql.org/download/">http://www.postgresql.org/download/</link> for more information and downloads.
Post-install steps:</simpara>
<orderedlist numeration="arabic" startingnumber="1">
<listitem>
<simpara>If *nix or MacOSX switch to user postgres or other OS user who is able to use psql command to connect to the PostgreSQL database.</simpara>
</listitem>
</orderedlist>
<screen>$ su postgres</screen>
<orderedlist numeration="arabic" startingnumber="2">
<listitem>
<simpara>Go to the DVWorkshop/dv-docker/demo directory and run the following command:</simpara>
</listitem>
</orderedlist>
<screen>$ psql -a -f financials-psql.sql</screen>
<orderedlist numeration="arabic" startingnumber="3">
<listitem>
<simpara>If Step 2 is successfully executed the the PostgreSQL environment contains the following databases. Hint: start the psql command line utility and type the “\l” to list the databases in PostgreSQL database.</simpara>
</listitem>
</orderedlist>
<screen>$ psql
psql (9.3.4, server 9.0.13)
Type "help" for help.

postgres=# \l
                               List of databases
     Name      |  Owner   | Encoding  | Collate | Ctype |   Access privileges
---------------+----------+-----------+---------+-------+-----------------------
 apaccustomers | postgres | SQL_ASCII | C       | C     |
 brokerinfo    | postgres | SQL_ASCII | C       | C     |
 eucustomers   | postgres | SQL_ASCII | C       | C     |
 postgres      | postgres | SQL_ASCII | C       | C     |
 products      | postgres | SQL_ASCII | C       | C     |
 rhq           | rhqadmin | SQL_ASCII | C       | C     |
 template0     | postgres | SQL_ASCII | C       | C     | =c/postgres          +
               |          |           |         |       | postgres=CTc/postgres
 template1     | postgres | SQL_ASCII | C       | C     | =c/postgres          +
               |          |           |         |       | postgres=CTc/postgres
 uscustomers   | postgres | SQL_ASCII | C       | C     |
(9 rows)

postgres=# \q</screen>
</section>
<section xml:id="_setup_mariadb_optional">
<title>Setup MariaDB (Optional)</title>
<simpara>Installation</simpara>
<simpara>The easiest way to install MariaDB is to use the pre-built binary packages which are available for a number of different operating systems. See <link xlink:href="https://downloads.mariadb.org">https://downloads.mariadb.org</link> for more information and downloads. Note: there&#8217;s no binary package available for Mac OsX users, but it is possible to install MariaDB using the homebrew package described on this page <link xlink:href="https://mariadb.com/kb/en/mariadb/building-mariadb-on-mac-os-x-using-homebrew/">https://mariadb.com/kb/en/mariadb/building-mariadb-on-mac-os-x-using-homebrew/</link></simpara>
<simpara>Post-install steps</simpara>
<orderedlist numeration="arabic" startingnumber="1">
<listitem>
<simpara>After the installation completes and using *nix, start MariaDB with:</simpara>
</listitem>
</orderedlist>
<screen>$ sudo /etc/init.d/mysql start</screen>
<orderedlist numeration="arabic" startingnumber="2">
<listitem>
<simpara>Go to the DVWorkshop/dv-docker/demo directory and tun the following command as depicted in the picture below.</simpara>
</listitem>
</orderedlist>
<screen>$ sudo mysql &lt; financials-mysql.sql</screen>
<orderedlist numeration="arabic" startingnumber="3">
<listitem>
<simpara>If Step 2 is successfully executed the MariaDB environment contains the following databases.</simpara>
</listitem>
</orderedlist>
<screen>sudo mysql
Password:

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| apaccustomers      |
| brokerinfo         |
| eucustomers        |
| mysql              |
| performance_schema |
| products           |
| test               |
| uscustomers        |
+--------------------+
9 rows in set (0.02 sec)

mysql&gt; exit
Bye</screen>
</section>
<section xml:id="_setup_mysql_optional">
<title>Setup MySQL (Optional)</title>
<simpara>Installation</simpara>
<simpara>The easiest way to install MySQL is to use the pre-built binary packages which are available for a number of different operating systems. See <link xlink:href="http://dev.mysql.com/downloads/mysql/">http://dev.mysql.com/downloads/mysql/</link> for more information and downloads.</simpara>
<simpara>Post-install steps</simpara>
<orderedlist numeration="arabic" startingnumber="1">
<listitem>
<simpara>If *nix or MacOSX go to the /usr/local/mysql directory and start mysqld_safe</simpara>
</listitem>
</orderedlist>
<screen>$ cd /usr/local/mysql
$ sudo ./bin/mysqld_safe</screen>
<orderedlist numeration="arabic" startingnumber="2">
<listitem>
<simpara>Go to the DVWorkshop/dv-docker/demo directory and tun the following command as depicted in the picture below.</simpara>
</listitem>
</orderedlist>
<screen>$ sudo /usr/local/mysql/bin/mysql &lt; financials-mysql.sql</screen>
<orderedlist numeration="arabic" startingnumber="3">
<listitem>
<simpara>If Step 2 is successfully executed the MariaDB environment contains the following databases.</simpara>
</listitem>
</orderedlist>
<screen>sudo /usr/local/mysql/bin/mysql
Password:

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| apaccustomers      |
| brokerinfo         |
| eucustomers        |
| mysql              |
| performance_schema |
| products           |
| test               |
| uscustomers        |
+--------------------+
9 rows in set (0.02 sec)

mysql&gt; exit
Bye</screen>
<simpara>The labs will use the following databases:</simpara>
<itemizedlist>
<listitem>
<simpara>apaccustomer</simpara>
</listitem>
<listitem>
<simpara>brokerinfo</simpara>
</listitem>
<listitem>
<simpara>eucustomers</simpara>
</listitem>
<listitem>
<simpara>products</simpara>
</listitem>
<listitem>
<simpara>uscustomers</simpara>
</listitem>
</itemizedlist>
<simpara>Congratulations, you have completed this introduction lab.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_install_red_hat_jboss_data_virtualization">
<title>Install Red Hat JBoss Data Virtualization</title>
<simpara>There are three different ways to install Red Hat JBoss Data Virtualization:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Graphical mode: Graphical mode launches a graphical wizard which provides step-by-step instructions for installing and configuring the Red Hat JBoss Data Virtualization. Additional setup, including the Quickstarts and Maven Repository, is also possible with the installer.</simpara>
</listitem>
<listitem>
<simpara>Text mode: You can launch the installer in the text mode as well. Text mode provides step-by-step instructions for installing and configuring the Red Hat JBoss Data Virtualization.</simpara>
</listitem>
<listitem>
<simpara>Automated script mode: You can install multiple identical instances of Red Hat JBoss Data Virtualization using the automated script. This automated script is generated after the first installation instance. We will explain the graphical mode and automated script mode in more detail in the following paragraphs.</simpara>
</listitem>
</orderedlist>
<section xml:id="_installing_red_hat_jboss_data_virtualization_through_graphical_mode">
<title>Installing Red Hat JBoss Data Virtualization through graphical mode</title>
<simpara>Download the Red Hat JBoss Data Virtualization installer binary by clicking the green download button at <link xlink:href="http://www.jboss.org/products/datavirt.html">http://www.jboss.org/products/datavirt.html</link>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-download.png"/>
</imageobject>
<textobject><phrase>1.1 DV download</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>Starting from JBoss Data Virtualization 6.2.0 one need to install JBoss EAP 6.4.0 including patch 3 first before installing JBoss Data Virtualization 6.2.0. In earlier versions of JBoss Data Virtualization the JBoss EAP server was included in the JBoss DV distribution. So we need to install JBoss EAP first, so remember the directory where you downloaded JBoss DV, because we need it later on.</simpara>
</note>
<simpara>Install JBoss EAP 6.4.0</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ unzip jboss-eap-6.4.0.zip
$ cd jboss-eap-6.4/bin
$ ./jboss-cli.sh
You are disconnected at the moment. Type 'connect' to connect to the server or 'help' for the list of supported commands.
[disconnected /]</programlisting>
<note>
<simpara>Skip apply patch 3 step when you have downloaded the software from <link xlink:href="http://jboss.org">jboss.org</link>.</simpara>
</note>
<simpara>Apply patch 3 to previously installed JBoss EAP 6.4.0 environment</simpara>
<programlisting language="bash" linenumbering="unnumbered">[disconnected /] patch apply jboss-eap-6.4.3-patch.zip
{
    "outcome" : "success",
    "result" : {}
}
[disconnected /] exit</programlisting>
<simpara>Open a terminal window and navigate to the location where the GUI installer was downloaded.
Run the installer using java at the command prompt:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ java -jar jboss-dv-installer-6.2.0.redhat-2.jar</programlisting>
<simpara>Follow the installer prompts to complete the installation process.</simpara>
<tip>
<simpara>If needed you can also take a look at the video "Getting Started with Red Hat JBoss Data Virtualization Installation and Configuration". See <link xlink:href="http://vimeo.com/76457404">http://vimeo.com/76457404</link> for more details.</simpara>
</tip>
<simpara>A dialogue box will open followed by the End User License Agreement. If you accept the terms of the agreement, select I accept the terms of this license agreement and then click <inlinemediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-NextBTN.png"/>
</imageobject>
<textobject><phrase>1.1 DV NextBTN</phrase></textobject>
</inlinemediaobject></simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-EULA.png"/>
</imageobject>
<textobject><phrase>1.1 DV EULA</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>A filepath confirmation dialogue box will appear. Choose an existing EAP 6 installation location to install JBoss Data Virtualization, click <inlinemediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-NextBTN.png"/>
</imageobject>
<textobject><phrase>1.1 DV NextBTN</phrase></textobject>
</inlinemediaobject></simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-FilePath.png"/>
</imageobject>
<textobject><phrase>1.1 DV FilePath</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>A select the packs dialogue box will appear. Review the packs you want to install and if satisfied, click <inlinemediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-NextBTN.png"/>
</imageobject>
<textobject><phrase>1.1 DV NextBTN</phrase></textobject>
</inlinemediaobject></simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-InstallPacks.png"/>
</imageobject>
<textobject><phrase>1.1 DV InstallPacks</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>You will be prompted to create new users. For convenience it is possible to select one password for all default passwords. Enter the new username and password in the appropriate fields. Furthermore select the checkbox "Add OData role" and "Add logging role". After filling-out the appropriate fields click <inlinemediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-NextBTN.png"/>
</imageobject>
<textobject><phrase>1.1 DV NextBTN</phrase></textobject>
</inlinemediaobject></simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-User.png"/>
</imageobject>
<textobject><phrase>1.1 DV User</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <inlinemediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-NextBTN.png"/>
</imageobject>
<textobject><phrase>1.1 DV NextBTN</phrase></textobject>
</inlinemediaobject> to proceed.</simpara>
<simpara>You can install Red Hat JBoss Data Virtualization either with default configuration or with additional configuration options. Select option Perform default configuration. Click <inlinemediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-NextBTN.png"/>
</imageobject>
<textobject><phrase>1.1 DV NextBTN</phrase></textobject>
</inlinemediaobject> to proceed.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-Install-config.png"/>
</imageobject>
<textobject><phrase>1.1 DV Install config</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>A summary of the installation will be displayed, see below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-install-summary.png"/>
</imageobject>
<textobject><phrase>1.1 DV install summary</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <inlinemediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-NextBTN.png"/>
</imageobject>
<textobject><phrase>1.1 DV NextBTN</phrase></textobject>
</inlinemediaobject> to start the installation and the Component installation progress window will be displayed.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-install-component-summary.png"/>
</imageobject>
<textobject><phrase>1.1 DV install component summary</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <inlinemediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-NextBTN.png"/>
</imageobject>
<textobject><phrase>1.1 DV NextBTN</phrase></textobject>
</inlinemediaobject> for the installation to commence. This may take a minute.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-install-completed.png"/>
</imageobject>
<textobject><phrase>1.1 DV install completed</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Once all the components are installed, click <inlinemediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-NextBTN.png"/>
</imageobject>
<textobject><phrase>1.1 DV NextBTN</phrase></textobject>
</inlinemediaobject>.</simpara>
<simpara>Click "Generate installation script and properties file" if you wish to generate an automatic script and properties file.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-install-completed-2.png"/>
</imageobject>
<textobject><phrase>1.1 DV install completed 2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>For now click <inlinemediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-DoneBTN.png"/>
</imageobject>
<textobject><phrase>1.1 DV DoneBTN</phrase></textobject>
</inlinemediaobject> to complete the installation.</simpara>
<simpara>Red Hat JBoss Data Virtualization is now successfully installed and configured.
When the installation is complete, navigate to</simpara>
<itemizedlist>
<listitem>
<simpara>Unix/Linux: EAP_HOME/bin and run the ./standalone.sh</simpara>
</listitem>
<listitem>
<simpara>Windows: EAP_HOME\bin and run standalone.bat</simpara>
</listitem>
</itemizedlist>
<simpara>to start the Red Hat JBoss Data Virtualization server.</simpara>
</section>
<section xml:id="_installing_red_hat_jboss_data_virtualization_through_automated_script_mode">
<title>Installing Red Hat JBoss Data Virtualization through automated script mode</title>
<simpara>Installing Red Hat JBoss Data Virtualization by using an automated script provides everything you need to get you started quickly.</simpara>
<simpara>Download the JBoss Data Virtualization installer binary by clicking the green download button at <link xlink:href="http://www.jboss.org/products/datavirt.html">http://www.jboss.org/products/datavirt.html</link>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.1-DV-download.png"/>
</imageobject>
<textobject><phrase>1.1 DV download</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Place the software in the software subfolder.</simpara>
<simpara>Modify the support/installscript_local.xml file to contain the full path to the preferred installation directory for JBoss Data Virtualization 6.2.0.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;installpath&gt;/home/jboss/dv&lt;/installpath&gt;</programlisting>
<simpara>The script performs the automated install of JBoss Data Virtualization v6.2.0.GA.
Run the following java command to install JBoss Data Virtualization in as shown below.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ cd support
$ java -jar ../software/jboss-dv-installer-6.2.0.redhat-2.jar installscript_local.xml</programlisting>
<simpara>The following username/passwords will be installed automatically for access to</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Component</entry>
<entry align="left" valign="top">URL</entry>
<entry align="left" valign="top">Username</entry>
<entry align="left" valign="top">Password</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>JBoss EAP Administration console</simpara></entry>
<entry align="left" valign="top"><simpara><link xlink:href="http://localhost:9990/console">http://localhost:9990/console</link></simpara></entry>
<entry align="left" valign="top"><simpara>admin</simpara></entry>
<entry align="left" valign="top"><simpara>redhat1!</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Teiid Server</simpara></entry>
<entry align="left" valign="top"><simpara><link xlink:href="http://localhost:8080/odata/&lt;VDB">http://localhost:8080/odata/&lt;VDB</link> name&gt;</simpara></entry>
<entry align="left" valign="top"><simpara>teiidUser</simpara></entry>
<entry align="left" valign="top"><simpara>redhat1!</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ModeShape</simpara></entry>
<entry align="left" valign="top"><simpara><link xlink:href="http://localhost:8080/modeshape-rest">http://localhost:8080/modeshape-rest</link></simpara></entry>
<entry align="left" valign="top"><simpara>modeshapeUser</simpara></entry>
<entry align="left" valign="top"><simpara>redhat1!</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Dashboard Builder</simpara></entry>
<entry align="left" valign="top"><simpara><link xlink:href="http://localhost:8080/dashboard">http://localhost:8080/dashboard</link></simpara></entry>
<entry align="left" valign="top"><simpara>dashboardAdmin</simpara></entry>
<entry align="left" valign="top"><simpara>redhat1!</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<tip>
<simpara>The ModeShape rest URL is accessible by the user modeshapeUser. If you want to have user teiidUser to access this url you have to add the connect role privileges to this user in the application-roles.properties file.</simpara>
</tip>
<simpara>In case you want to change the password of the admin user or one the other users shown above, go to dv/jboss-eap-6.4/bin and type the following command and inputs as shown below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.2-DV-auto-install-2.png"/>
</imageobject>
<textobject><phrase>1.2 DV auto install 2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Browse to <link xlink:href="http://localhost:8080/dashboard">http://localhost:8080/dashboard</link> for the Red Hat JBoss Data Virtualization Dashboard to verify the installation and use teiidUser/redhat1! as the credentials that were installed as default and click <guibutton>Log In</guibutton>.</simpara>
<simpara>Red Hat JBoss Data Virtualization is now successfully installed, configured and started using the automated script mode.</simpara>
</section>
<section xml:id="_provision_red_hat_jboss_data_virtualization_on_openshift_online">
<title>Provision Red Hat JBoss Data Virtualization on OpenShift Online</title>
<simpara>With OpenShift you can easily deploy and run JBoss Data Virtualization in minutes to connect your applications to data from many different sources. JBoss Data Virtualization on OpenShift Online is available as a Developer Preview to allow you to explore the capabilities of the technology running on OpenShift Online.</simpara>
<simpara>Get your free OpenShift Online account
Sign up for your free account OpenShift Online account at <link xlink:href="https://www.openshift.com/app/account/new">https://www.openshift.com/app/account/new</link> and you should see the screen below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.3-DV-OpenShift.png"/>
</imageobject>
<textobject><phrase>1.3 DV OpenShift</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>If you already have an OpenShift Online account please sign in with your known OpenShift Online username password combination.</simpara>
<simpara>Create a new application
If this is your first login into OpenShift Online click at the “&#8594; Create your first application now” link</simpara>
<simpara>If you already have an OpenShift Online account click <guibutton>Add Application</guibutton> below your list of applications.
Alternatively, you can deploy the Data Virtualization 6 (jboss-dv-6.1.0) cartridge using the OpenShift RHC Client Tools. Using the rhc client tools type:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ rhc app create dv jboss-dv-6.1.0</programlisting>
<simpara>Choose a type of applications</simpara>
<simpara>You can either scroll down to the list of quick links and click the <guibutton>JBoss Data Virtualization 6 (jboss-dv-6.1.0)</guibutton> button under “xPaaS” or search for “Data”.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.3-DV-OpenShift-app.png"/>
</imageobject>
<textobject><phrase>1.3 DV OpenShift app</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.3-DV-OpenShift-app2.png"/>
</imageobject>
<textobject><phrase>1.3 DV OpenShift app2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Configure Application</simpara>
<simpara>Name your application in your domain, scroll down and click the <guibutton>Create Application</guibutton> button.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.3-DV-OpenShift-config-app.png"/>
</imageobject>
<textobject><phrase>1.3 DV OpenShift config app</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Next steps</simpara>
<simpara>In the Next steps we would like to include a PostgreSQL database to the application previously created on OpenShift Online.
The figure below is shown when the application is successfully created in your domain.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.3-DV-OpenShift-app-create.png"/>
</imageobject>
<textobject><phrase>1.3 DV OpenShift app create</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Now we would like to add a PostgreSQL database to the application. Click the Application name link, in the above figure it&#8217;s called “dv61”.
The following screen should appear.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.3-DV-OpenShift-add-psql.png"/>
</imageobject>
<textobject><phrase>1.3 DV OpenShift add psql</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click “Add PostgreSQL 9.2”</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/1.3-DV-OpenShift-add-psql2.png"/>
</imageobject>
<textobject><phrase>1.3 DV OpenShift add psql2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click “Add Cartridge” to add PostgreSQL 9.2 to previously created dv61 environment.</simpara>
<simpara>You have now a successfully created a Red Hat JBoss Data Virtualization environment with a PostgreSQL 9.2 database in just a matter of seconds.</simpara>
<simpara>Congratulations, you have now completed this lab.</simpara>
</section>
</chapter>
<chapter xml:id="_install_red_hat_jboss_developer_studio">
<title>Install Red Hat JBoss Developer Studio</title>
<simpara>This lab will guide you how to install Red Hat JBoss Developer Studio and the tools for creating data views that are accessible through standard protocols (the Teiid Designer plug-in for Red Hat JBoss Developer Studio (JBDS) and connect Red Hat JBoss Developer Studio to the Red Hat JBoss Data Virtualization server.</simpara>
<simpara>If you don&#8217;t already have Red Hat JBoss Developer Studio 8.1.0, download it from <link xlink:href="https://www.jboss.org/products/jbds.html">https://www.jboss.org/products/jbds.html</link> by clicking the green download button.
You can use either the installer which includes JBoss EAP (jboss-devstudio-8.1.0.GA-installer-eap.jar) or the stand-alone installer (jboss-devstudio-8.1.0.GA-installer-standalone.jar).
The instructions below is using the installer with EAP.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-download.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS download</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Run the JBDS installer using the java command.
The current available version is 8.1.0.GA, and to run the installer at the command prompt see below.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ java -jar jboss-devstudio-8.1.0.GA-installer-eap.jar</programlisting>
<simpara>Follow the installer prompts to complete the installation process.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-install.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS install</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>When the Installer window opens, click <guibutton>Next</guibutton>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-install-eula.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS install eula</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>After reading and agreeing to the terms of the End User License Agreement, select I accept the terms of this license agreement and click <guibutton>Next</guibutton>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-install-target.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS install target</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>In the Select the installation path field, type the path where you want Red Hat JBoss Developer Studio to be installed or click Browse to navigate to the location. When the Select the installation path field shows the correct path, click <guibutton>Next</guibutton>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-install-target2.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS install target2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>When you are prompted about the specified location being created or overwritten, review the message and, if satisfied, click <guibutton>OK</guibutton> to proceed and click <guibutton>Next</guibutton> to continue.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-install-selectvm.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS install selectvm</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>In the Select Java VM step, Default Java VM is automatically selected. Ensure that the disabled text field contains the path of the Java developer kit you want to use. This is based on the default Java developer kit of your system. To change the specified Java developer kit, select Specific Java VM and type the path of the Java developer kit in the text field or use the Browse button to locate the Java developer kit. When the text field shows the correct Java developer kit path, click <guibutton>Next</guibutton>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-install-selectplatform.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS install selectplatform</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>In the Select Platforms and Servers step one can install Red Hat JBoss Enterprise Application Server which is included and add server to make use of automatic runtime detection for finding already installed application servers. Select No and skip the option for adding locations for now since we will add servers later. Click <guibutton>Next</guibutton> to proceed.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-install-review.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS install review</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Review the details in the Summary Information window and, if they are correct, click <guibutton>Next</guibutton>. The installation commences.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-install-complete.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS install complete</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>When the installation progress bar shows Finished, click <guibutton>Next</guibutton>. The installation process is now complete.</simpara>
<simpara>To create shortcuts for starting JBoss Developer Studio, select the Create shortcuts in the Start-Menu and Create additional shortcut on the desktop check boxes and click <guibutton>Next</guibutton>.
To automatically start JBoss Developer Studio when the Installer window closes, select the Run JBoss Developer Studio after installation check box.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-install-complete2.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS install complete2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>Done</guibutton> to close the Installer window.</simpara>
<simpara>When the installation is completed, run JBoss Developer Studio 8.1.0. When the Red Hat JBoss Developer Studio starts, you are asked to choose the workspace folder for the session. The workspace is where your projects are stored.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-install-workspace.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS install workspace</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>To set the workspace location, follow these steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>In the Workspace field, type the path for a new or existing workspace or use Browse to navigate to the workspace location.</simpara>
</listitem>
<listitem>
<simpara>If you do not want to be asked to choose a workspace folder each time the IDE starts, select the Use this as the default and do not ask again check box.</simpara>
</listitem>
<listitem>
<simpara>Click <guibutton>OK</guibutton>.</simpara>
</listitem>
</orderedlist>
<simpara>The workspace location prompting behavior can be altered at any time by clicking <menuchoice><guimenu>Window</guimenu> <guimenuitem>Preferences</guimenuitem></menuchoice>. Expand <menuchoice><guimenu>General</guimenu> <guisubmenu>Startup and Shutdown</guisubmenu> <guimenuitem>Workspace</guimenuitem></menuchoice>. Select or clear the Prompt for workspace on startup check box to alter the behavior as appropriate.</simpara>
<note>
<simpara>After JBoss Developer Studio 8.1.0 you might get a informational message to inform you that there are updates available.
Please upgrade to the latest patch version of JBoss Developer Studio 8.1.0 by clicking in the Update balloon message.</simpara>
</note>
<simpara>The easiest way to install the JBoss Data Virtualization Development option in Red Hat JBoss Developer Studio is to use JBoss Central.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-jboss-central.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS jboss central</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select <menuchoice><guimenu>Help</guimenu> <guimenuitem>JBoss Central</guimenuitem></menuchoice> if JBoss Central isn&#8217;t active. Click the tab Software/Update and select the JBoss Data Virtualization Development option and click <guibutton>Install</guibutton>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-add-new-software-review.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS add new software review</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Review Install Details and click the <guibutton>Next &gt;</guibutton> button.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-add-new-software-security.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS add new software security</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The Security Warning window appears and click the <guibutton>OK</guibutton> button to proceed.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.1-JBDS-install-restart.png"/>
</imageobject>
<textobject><phrase>2.1 JBDS install restart</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The Software Updates window appears. Press the <guibutton>Yes</guibutton> button to restart Red Hat JBoss Developer Studio to apply the changes to take effect.</simpara>
<simpara>Now that you have JBoss Data Virtualization and JBoss Developer Studio successfully installed, it is time to “hook up” JBoss Developer Studio to the JBoss Data Virtualization server instance.</simpara>
<simpara>If the Servers pane is not already visible in JBoss Developer Studio, you can open it by <menuchoice><guimenu>Window</guimenu> <guisubmenu>Show View</guisubmenu> <guisubmenu>Other</guisubmenu> <guisubmenu>Server</guisubmenu> <guimenuitem>Servers</guimenuitem></menuchoice>. The Show View window is presented below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.2-JBDS-servers.png"/>
</imageobject>
<textobject><phrase>2.2 JBDS servers</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Now, click the <guibutton>OK</guibutton> button. The Servers pane will now be visible in the lower portion of JBoss Developer Studio and is displayed below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.2-JBDS.png"/>
</imageobject>
<textobject><phrase>2.2 JBDS</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Now, it is a matter of clicking through several screens to add the JBoss Data Virtualization server instance that was installed as part of Lab 1. Click the link “No servers are available. Click this link to create a new server&#8230;&#8203;” and following window will appear:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.2-JBDS-add-server.png"/>
</imageobject>
<textobject><phrase>2.2 JBDS add server</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>With the New Server wizard enabled, be sure you entries look like those above. Select JBoss Enterprise
Middleware &#8594; JBoss Enterprise Application Platform 6.1+ as the server type. You can keep the defaults that are selected or enter the values appropriate for your workstation. In this case, “localhost” is entered for Server’s host name and “Create Runtime Server” is entered for the Server name. Change the Server name into a meaningful name like "JBoss Data Virtualization 6.2". Click the <guibutton>Next</guibutton> button.
Next, the JBoss Runtime will need to be created. Essentially, this is selecting the “home” directory for the JBoss Data Virtualization instance that was installed as part of Lab 1. The values to select are illustrated below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.2-JBDS-setup-runtime.png"/>
</imageobject>
<textobject><phrase>2.2 JBDS setup runtime</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>Next</guibutton>. Select the “home” directory for the JBoss Data Virtualization instance. This will be &lt;path to installed instance&gt;/jboss-eap-6.4. Once this runtime is selected, the available configurations are available. To keep things simple, select the “default” profile.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.2-JBDS-setup-runtime2.png"/>
</imageobject>
<textobject><phrase>2.2 JBDS setup runtime2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>Finish</guibutton>.</simpara>
<simpara>The Servers pane will now have the available server available as indicated below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.2-JBDS-servers-pane.png"/>
</imageobject>
<textobject><phrase>2.2 JBDS servers pane</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>At this point, you can right-click on the server and there is a list of available options. Click <guimenu>Start</guimenu> from the available options and the server will start up.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.2-JBDS-menu-start.png"/>
</imageobject>
<textobject><phrase>2.2 JBDS menu start</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.2-JBDS-menu-start2.png"/>
</imageobject>
<textobject><phrase>2.2 JBDS menu start2</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>If JBoss Data Virtualization Server is already started from the command line using standalone.sh or standalone.bat, JBoss Developer Studio will show a warning "Server already running on localhost", select option "Set the server adapter to 'started', without launching a new server."</simpara>
</note>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/2.2-JBDS-menu-started.png"/>
</imageobject>
<textobject><phrase>2.2 JBDS menu started</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>You can now begin creating your own Red Hat JBoss Data Virtualization projects.</simpara>
<simpara>Congratulations, you have now completed this lab.</simpara>
</chapter>
<chapter xml:id="_demo_scenario">
<title>Demo Scenario</title>
<simpara>The customer here is a retail brokerage firm with customers across the US and Europe. Data is currently spread over several databases – one for US customer data, one for EU customer data, and a centralized database with information on securities products. The firm&#8217;s market data group also has a web service we can query to find the current price of any security.
The brokers currently don&#8217;t have a way to view data from all of these various databases on a single screen – they need to flip between several different applications, each of which shows data from only one of these data sources.
They have requested a new screen for their applications that will display all information for one or more customers (across both the US and Europe) in a single query. They want returned in a single query all the accounts for a given customer – and for each of those accounts, all of the current securities held by that account, with their current price.
They also want this screen to be available in each of several applications, so no matter which application they are in they can get to this screen. This actually introduces a lot of complexity, since the applications were developed by several groups, all of whom want the data returned in a slightly different format and protocol – some want the data returned as a hierarchy (customer → account → holdings) while some want all the data in a single flat data structure; and some want native access to the data from their .NET or Java applications, while others want to access the data as a web service.
So what the JBoss Data Virtualization data architect needs to do is provide several slightly different versions of the same federated data view for each of these groups.
And, they want to make sure that as they solve this tactical use case they build something that can be used as a basis for other future use cases.</simpara>
<section xml:id="_demo_context">
<title>Demo Context</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-context.png"/>
</imageobject>
<textobject><phrase>Demo Context</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_how_this_is_accomplished_in_jboss_data_virtualization">
<title>How this is accomplished in JBoss Data Virtualization</title>
<simpara>Here&#8217;s how you can do this in JBoss Data Virtualization, using the Teiid Designer graphical design tool:</simpara>
</section>
<section xml:id="_demo_workflow">
<title>Demo Workflow</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demoflow.png"/>
</imageobject>
<textobject><phrase>demoflow</phrase></textobject>
</mediaobject>
</informalfigure>
<informaltable frame="none" rowsep="0" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>01 - Import metadata</simpara></entry>
<entry align="left" valign="top"><simpara>02 - Virtual Base Layer</simpara></entry>
<entry align="left" valign="top"><simpara>07 - OData</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>03 - Enterprise Data Layer</simpara></entry>
<entry align="left" valign="top"><simpara>10 - Dashboard</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>04 - Federated Data Layer</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>05 - Webservices</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>06 - Deploy VDB</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<orderedlist numeration="arabic" startingnumber="1">
<listitem>
<simpara>Import of metadata from data sources</simpara>
</listitem>
</orderedlist>
<simpara>First, they import in the metadata for all of the various data sources into Designer. For the relational databases, Designer does this by connecting to each database via JDBC and importing such metadata as the names of each table in the database, the columns in each of these tables, and the data types of each of these columns. For this use case our relational databases all happen to only have tables, but if they had views or stored procedures, they would have been imported too.</simpara>
<simpara>For the stock quote web service, this is done by reading the WSDL for the web service and importing in the schema for the web service request that the service expects, as well as the schema for the response that the web service will retrieve. Since JBoss Data Virtualization uses relational database semantics for both design modeling and its runtime engine, this information appears in Designer as one or more relational tables that represent the the request and response schemas. In this case, a single table is used to represent both the request and response; but more often than not, the importer will create separate tables for the request and response, and if the response has a heirarchical XML schema the response would actually be represented as several tables with primary/foreign key pair relationships – a normalized relational schema.</simpara>
<simpara><emphasis role="strong">Build view layers on top of source metadata</emphasis></simpara>
<simpara>Then, they build several layers of view models on top of that data source model. This is a fairly typical JBoss Data Virtualization project, with six layers of view models on top of the data source models – with the transformational logic for each view being fairly simple, and complex data transformations achieved by this use of several layers of such views. Now, in a traditional relational database, such a design would have a fairly heavy performance penalty at runtime to deal with all of these layers of views, which is why in a traditional database you&#8217;d see a use case like this defined as a single view defined with a very lengthy and complex SQL statement, but one of the really nice things about JBoss Data Virtualization is that it compresses all of these layers at run time down to a single layer, so there is not really any such penalty to using layered views with JBoss Data Virtualization.</simpara>
<orderedlist numeration="arabic" startingnumber="2">
<listitem>
<simpara>Virtual Base Layer</simpara>
</listitem>
</orderedlist>
<simpara>The first layer we&#8217;ve defined here is the Virtual Base Layer. This model layer in most projects is just a series of views that have one-to-one correspendence to each of the source tables. The reason we have this model layer is to provide an abstraction layer to handle any future changes to the data source schemas – if there is such a change, having this layer gives us a place to mask any changes to the actual source schema from the higher level model layers. As you can see, when I double click on the diamond with a T (representing the transformation logic for that view), the language that JBoss Data Virtualization uses to define view transformations is plain old ANSI SQL-92. This is another very nice aspect of JBoss Data Virtualization – we don&#8217;t make you learn a new language to define transformations, you just use normal SQL syntax, which is something that we find most data architects are already fairly comfortable with. We find that the learning curve for our SQL dialect is very low for data architects coming from any of the major RDBMS&#8217;s (Oracle, DB2, MS SQL, or Sybase), since JBoss Data Virtualization syntax is as I mentioned essentially just ANSI SQL-92, which is a very large subset of the SQL functionality of any of the major databases.</simpara>
<orderedlist numeration="arabic" startingnumber="3">
<listitem>
<simpara>Enterprise Data Layer</simpara>
</listitem>
</orderedlist>
<simpara>The next layer up are the models in the EnterpriseDataLayer folder. What these models do is resolve the slight semantic differences between the eucustomers and uscustomers databases – for example the US version includes a field for middle initial only in the customer table, where the EU version of the customer table has a corresponding field for middle name.</simpara>
<simpara>Now, one technique we use here to make resolving these semantic differences a little bit easier here is to convert all of the data types for these tables from the standard SQL datatypes to one of a set of custom datatypes we&#8217;ve defined, using JBoss Data Virtualization&#8217;s data dictionary capabilities. This way we can ensure that we get all data for a particular field into the same datatype and also gives us a guide to resolving any differences in field names between the two. For example here we convert the EU MiddleName field into something that works for the custom MiddleInitial datatype by using the SQL LEFT function to get just the first character of the middle name. Another nice thing about using custom datatypes is that these datatypes are also used to better describe returned data when JBoss Data Virtualization returns data in XML documents (such as with web services) – we wish we could do this for JDBC and ODBC too, but unfortunately those protocols don&#8217;t have a good custom datatype mechanism so we map the custom datatypes into the appropriate standard JDBC/ODBC type at run time when returning data via JDBC or ODBC.</simpara>
<simpara>One thing I want to make clear is that there is no hard requirement to define or use a data dictionary with custom datatypes within JBoss Data Virtualization – in fact most of our customers do not use a data dictionary, but instead do this semantic mediation without them (by manually comparing datatypes and field lengths between the two data sources). Our goal with JBoss Data Virtualization is to not impose any roadblocks for those users that want to get their use case resolved with JBoss Data Virtualization as rapidly as possible – so we don&#8217;t force any requirement on users to define a data dictionary or a taxonomy or anything like that.</simpara>
<orderedlist numeration="arabic" startingnumber="4">
<listitem>
<simpara>Federated Data Layer</simpara>
</listitem>
</orderedlist>
<simpara>Now, the next three layers of models are in the FederatedDataLayer folder. What we try to do in the mid layer is define a set of standard, generic views of the federated data that are not specific to the requirements of any one use case, but rather are the architect&#8217;s data model on how the data from the various data sources should be joined together. Each of these three models federates an additional source to our original model (as we discussed earlier, with JBoss Data Virtualization we try to have each model layer only take a small step towards our eventual goal, and perform complex federations by building multiple layers of models. First we have the AllCustAccts model. What this model does is union together the EU and US customer models to form a federated view of all customers. If we look at the transformation for the account table here, you&#8217;ll see again that this is done with some fairly straightforward SQL – this is just a SQL union between the two tables.</simpara>
<simpara>Something else I want to show with this table is JBoss Data Virtualization&#8217;s capability to perform federated writes. If you see that notation “suid” above the account table, that means that this particular table is configured for not only reads(SQL select), but also for updates, inserts, and deletes. The way this is defined in Designer is by using SQL (more precisely the JBoss Data Virtualization stored procedure language) to define the logic for what an update, insert, or delete means for this particular table, in terms what action should be performed on the layer of models below the current one. And that model layer will have the logic defined for the previous level, and so on down to the model representing the data source. This approach to defining write logic lets us define exactly what a write means even on a table that is built on top of many layers of models or that does complex federation. A good example of the need for this is in the INSERT logic here. If someone does an insert on this table, where should the write go – to the EU database or the US one? Here you&#8217;ll see that when an INSERT is done on this table we actually first do a SELECT on the corresponding customer table to determine the geography for the customer referenced in the row to be inserted, and then do the write to the correct database depending on where the customer record is located. JBoss Data Virtualization does all of these federated writes by default as a true XA transaction, so if writes to one source in a federated write scenario aren&#8217;t successful then the transaction is rolled back.</simpara>
<simpara>Now, if you look at the tables in this All_Customers model you&#8217;ll see that not only do we have the account, customer, and accountholdings tables from the previous model layers, but we also have a fourth table that is a flattened representation of the data from all three tables. We do this in order to provide parallel representations of the data as both a normalized relational schema (with three separate tables), and also as a flattened, denormalized view. Starting to build these two parallel representations at this level is useful because it lets us join all of the tables in the EU database together before they are unioned with the US database – this will result in slightly more efficient federated queries at run time than if we were to join the other way around, for those views we may eventually build that are also mostly denormalized.</simpara>
<simpara>On top of All_Customers, we might have All_Customers_Products, where we also join in data from the products database (such as the names and ticker symbols for each security), and on top of that we have All_Customers_Products_Values, which also joins in the current value for each security from our web service source. So at this point we have many layers of models, leading up to AllCustAccts_Products_Values, where as you&#8217;ll see from this dependency view we have rolled up all of the data from our federated sources to provide the canonical data architect&#8217;s representation of the data.</simpara>
<orderedlist numeration="arabic" startingnumber="5">
<listitem>
<simpara>Virtual Query Layer – Web services</simpara>
</listitem>
</orderedlist>
<simpara>If there are web service users that want such a flattened view of the data, we&#8217;ve built a web service on top of All_Customers model. These sorts of web services (returning data from a single table) can be built by JBoss Data Virtualization automatically using a web service generation wizard.</simpara>
<simpara>We also have this data presented in a hierarchical view in the All_Customers model. If you look at this model, you&#8217;ll see that this model represents this data in a hierarchical view, by returning the data as an XML document. This XML document can then be returned back to the end user either via web services built on top of this document, as is done in the All_Customers model, or can be queried via our JDBC driver.</simpara>
<orderedlist numeration="arabic" startingnumber="6">
<listitem>
<simpara>Packaging models in a Virtual Database</simpara>
</listitem>
</orderedlist>
<simpara>And now that all of these services are developed, we package them up in a VDB deployment file , where as we mentioned earlier we specify which models should be included for deployment, and of those which should be visible to end users.
For this workshop we only expose the All_Customers model for now.</simpara>
<simpara>Have fun with while building the demo scenario yourself.</simpara>
</section>
</chapter>
<chapter xml:id="_create_a_teiid_project_and_import_data_source">
<title>Create a Teiid project and Import Data Source</title>
<simpara>Make sure that the previous labs have been completed so that a JBoss Data Virtualization instance is running and JBDS is connected to the JBoss Data Virtualization server.</simpara>
<section xml:id="_prerequisites_2">
<title>Prerequisites</title>
<itemizedlist>
<listitem>
<simpara>If using PostgreSQL database, download the <link xlink:href="http://jdbc.postgresql.org/download.html">PostgreSQL JDBC Driver</link>. If you are using JDK 1.6 then you should use the JDBC4 version. If you are using JDK 1.7 or JDK 1.8 then you should use the JDBC41 version.</simpara>
</listitem>
<listitem>
<simpara>If using MySQL database, download the <link xlink:href="http://www.mysql.com/products/connector/">MySQL JDBC Driver</link>.</simpara>
</listitem>
<listitem>
<simpara>Save the JDBC driver in a "well-known" directory</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_where_are_we">
<title>Where are we?</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-cp.png"/>
</imageobject>
<textobject><phrase>demo cp</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_open_the_teiid_perspective">
<title>Open the Teiid Perspective</title>
<simpara>To begin this exercise, launch JBDS (if it is not already open), and open the “Teiid Designer” perspective. This is because the JBoss perspective is the default perspective.
To open the “Teiid Designer” perspective, first select <menuchoice><guimenu>Window</guimenu> <guisubmenu>Open Perspective</guisubmenu> <guimenuitem>Other&#8230;&#8203;</guimenuitem></menuchoice> in order for the full list of perspectives to be displayed and the “Teiid Designer” perspective to be selectable.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.1-JBDS-perspective.png"/>
</imageobject>
<textobject><phrase>3.1 JBDS perspective</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select Teiid Designer from the perspective list as shown below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.1-JBDS-Teiid-designer.png"/>
</imageobject>
<textobject><phrase>3.1 JBDS Teiid designer</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>OK</guibutton>.
This will bring you to a screen that looks like this:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.1-JBDS-Teiid-designer2.png"/>
</imageobject>
<textobject><phrase>3.1 JBDS Teiid designer2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Connecting to a running Server instance is necessary to execute previews of the data services that we will create. In the Teiid Guides window select Teiid.
Select the option "Set the Default JBoss / Teiid instance" and double-click on the JBoss Data Virtualization 6.1 server in the Server pane.
For the name simply use “JBoss Data Virtualization 6.1”. For the Teiid JDBC Connection Info, enter “localhost” for the host and enter teiidUser / redhat1! for the username / password. Keep the default port number. Also, be sure that the “Save” checkbox is marked. The “SSL” box should not be marked. Keep the default port number. When complete, your Teiid Server Connection Information should look like the illustration below.
As a “sanity” check, be sure to click the "Test Administration Connection" and "Test JDBC Connection" links. You should get a "OK" message. If you do not, please raise your hand. If it failed, it may be necessary to cancel and retry the steps again.</simpara>
<simpara>The Teiid View along the bottom of JBDS should look like the following illustration.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.1-JBDS-Teiid-view.png"/>
</imageobject>
<textobject><phrase>3.1 JBDS Teiid view</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_creating_a_teiid_project">
<title>Creating a Teiid Project</title>
<simpara>Before you can create models of how your data will be exposed or used, you must first create a project. For the purposes of these labs, we will create a project named Financials. This Financials project will be where we create all of our source and view models and Virtual Database (VDB) files. To create the project, from the menu bar on JBDS, select <menuchoice><guimenu>File</guimenu> <guisubmenu>New</guisubmenu> <guimenuitem>Teiid Model Project</guimenuitem></menuchoice>.
The New Model Project wizard will be displayed as below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.2-new-model-project.png"/>
</imageobject>
<textobject><phrase>3.2 new model project</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>In the project name, enter “Financials” and keep the remaining defaults. Select the <guibutton>Next &gt;</guibutton> button.</simpara>
<simpara>After clicking <guibutton>Next</guibutton>, the following window is presented for Project References.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.2-new-model-project2.png"/>
</imageobject>
<textobject><phrase>3.2 new model project2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Keep the default and click <guibutton>Next &gt;</guibutton> again. The next window that is presented is the Model Project Options. These are the folders that we will use during the course of building our Financials project. For this lab we will enter DataSources, EnterpriseDataLayer, Schemas, VirtualBaseLayer and WebServices. The Model Project Options window should look like that below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.2-new-model-project3.png"/>
</imageobject>
<textobject><phrase>3.2 new model project3</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>At this point, you can click the <guibutton>Finish</guibutton> button.</simpara>
<simpara>After expanding the Financials Project, the JBDS Teiid Designer Perspective should look similar to the figure below below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.2-JBDS-Teiid-view.png"/>
</imageobject>
<textobject><phrase>3.2 JBDS Teiid view</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_creating_a_source_model">
<title>Creating a Source Model</title>
<simpara>We must create a source model in order to access physical data or information from a source. The source model (also referred to as the physical model) contains all the metadata necessary for a Virtual Database (VDB) and its associated connectors to access or query data from a target source. There are a few different ways of creating source models. We will first go over the process of creating a source model using the Metadata Import Wizard.
The Metadata Import Wizard helps you create new models in the workspace by importing metadata information from a physical enterprise information system or other data source. When you import metadata, the Designer creates a new metadata model for you. Once you have created this metadata model, you can alter it as you would any other. Keep in mind that any changes you make to an imported metadata model do not impact the underlying structure of the enterprise information system the model represents.
In some cases you can also use the Metadata Import Wizard to update the information within the models based on changes to the underlying data source.
The Teiid Designer comes with a number of plug-ins to import metadata from sources such as JDBC-compliant databases, text files, Salesforce.com, WSDL&#8217;s, XML Schemas, and DDL files.
More information on the Import Wizard (and all of the features in the Teiid Designer) is available in the “Designer Users Guide”.</simpara>
</section>
<section xml:id="_importing_metadata_from_the_product_database">
<title>Importing Metadata from the Product Database</title>
<simpara>Right-click on the “DataSources” folder and select <guimenu>Import&#8230;&#8203;</guimenu>. In the Import wizard dialog, select the arrow next to “Teiid Designer” to expand the import options. Now, select “JDBC Database &gt;&gt; Source Model” and click <guibutton>Next &gt;</guibutton>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-importing-metadata.png"/>
</imageobject>
<textobject><phrase>3.3 importing metadata</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>In the “Import JDBC Database &gt;&gt; Source Model” wizard, you will need to select a Connection Profile. If a connection profile does not exist for the database that contains the Product Schema, then select the <guibutton>New&#8230;&#8203;</guibutton> button to create it.
The Connection Profile Wizard will come up. Scroll through the list to see the supported databases, then choose “PostgreSQL” for the connection profile type. Enter “Products” for the Name and click <guibutton>Next &gt;</guibutton>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-setup-connection-profile.png"/>
</imageobject>
<textobject><phrase>3.3 setup connection profile</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The next step of setting up the connection profile is selecting the driver to use. If the driver you need is not listed in the drop-down list of Drivers (and it should not be if this is your first time through these steps).</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-add-jdbc-driver.png"/>
</imageobject>
<textobject><phrase>3.3 add jdbc driver</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Then select the cross-haired icon “New Driver Definition” which is the first button to the right of Drivers drop-down list.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-setup-connection-profile2.png"/>
</imageobject>
<textobject><phrase>3.3 setup connection profile2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>In the “New Driver Definition” dialog, select the PostgreSQL or MySQL JDBC Driver. It will indicate that the driver JAR is not found.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-setup-connection-profile3.png"/>
</imageobject>
<textobject><phrase>3.3 setup connection profile3</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click on the “JAR List” tab in the New Driver Definition wizard and select in our case the PostgreSQL JDBC driver: postgresql-8.1-404.jdbc2.jar and click <guibutton>Remove JAR/Zip</guibutton> and then click the <guibutton>Add JAR/Zip</guibutton> button to select the JDBC driver file to use to access the PostgreSQL jar that is part of your drive. Select the PostgreSQL/MySQL JDBC driver file from the directory where this file is saved after download. Click <guibutton>OK</guibutton>. After clicking <guibutton>OK</guibutton>, the warning that the JAR file could not be found will go away. Click <guibutton>OK</guibutton> to return to the previous wizard.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-import-db-via-jdbc.png"/>
</imageobject>
<textobject><phrase>3.3 import db via jdbc</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Now that the driver has been selected, you can fill in the database, url, username, and password for the connection profile.
Use the following values:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Database</entry>
<entry align="left" valign="top">URL</entry>
<entry align="left" valign="top">Username</entry>
<entry align="left" valign="top">Password</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>products</simpara></entry>
<entry align="left" valign="top"><simpara>jdbc:postgresql://localhost:5432/products</simpara></entry>
<entry align="left" valign="top"><simpara>postgres</simpara></entry>
<entry align="left" valign="top"><simpara>postgres</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Go ahead and check the “Save password” checkbox. Your JDBC Connection Profile wizard should resemble that below. Click <guibutton>Test Connection</guibutton>. A successful ping should return. If it does not, please raise your hand. Click <guibutton>Finish</guibutton>. After clicking “Finish”, your Import Database via JDBC wizard should look like that below.
From this point, clicking <guibutton>Next &gt;</guibutton> will take you to the dialog to select the metadata types that will be included when imported. The metadata that will be selected is indicated in the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-import-db-via-jdbc2.png"/>
</imageobject>
<textobject><phrase>3.3 import db via jdbc2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Once your database metadata selections have been made, click the <guibutton>Next</guibutton> button. This will bring up the Select Database Objects dialogue. Be sure to click the arrow icon next to “public” in the Products database to expand the tree to show all objects available to import. Select the TABLE option, this will select the two tables we want to import.
Specifically, your dialogue for select database objects should look like that below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-import-db-via-jdbc3.png"/>
</imageobject>
<textobject><phrase>3.3 import db via jdbc3</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>If your dialogue looks like that above, click the <guibutton>Next &gt;</guibutton> button. This will bring up the final screen of the JDBC Import Wizard as indicated below.
Notice that there is a requirement to select which folder this model should be created in. To the right of the “Into Folder” attribute, there is a button with <guibutton>&#8230;&#8203;</guibutton> on it. Click this button and the following screen will be shown.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-import-db-via-jdbc4.png"/>
</imageobject>
<textobject><phrase>3.3 import db via jdbc4</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select the DataSources folder as indicated above. Once the folder has been selected, click the <guibutton>OK</guibutton> button. This will bring us back to the final screen of the Import Database via JDBC wizard. Your screen should look like the one below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-import-db-via-jdbc5.png"/>
</imageobject>
<textobject><phrase>3.3 import db via jdbc5</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>To keep the table names simple, make sure the “Use Fully Qualified Names” checkbox is unchecked. After verifying it matches, click the <guibutton>Finish</guibutton> button.
You will now see the Products.xmi source model was opened and its Package Diagram can be seen in the model view area. Click on productdata_pkey (the primary key of the productdata table at the bottom) and note that the Primary Key (productid) in productdata and the Foreign Key (productid) in the productssymbols table are highlighted. This is because Teiid Designer knows via the metadata that all of these elements are related.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-Products.png"/>
</imageobject>
<textobject><phrase>3.3 Products</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_preview_data_via_the_teiid_server">
<title>Preview Data via the Teiid Server</title>
<simpara>With an active Teiid Server connection, all physical models that have been imported, along with any virtual models that are built on top of them, can be sampled (previewed) with the simple click of a button. To do this, let&#8217;s utilize the Modeling Actions palette on the right-hand side of the Designer. Select Model JDBC Source and to Preview data, double-click on the Preview Data action.
This will bring up the Preview Data dialogue as indicated below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-Preview-data.png"/>
</imageobject>
<textobject><phrase>3.3 Preview data</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click the <guibutton>&#8230;&#8203;</guibutton> button to open up a Table or Procedure Selection window. This allows us to drill-down into the tables that we wish to preview data for. For this lab, simply expand Financials, DataSources, and Products.xmi in order to select the productdata table as indicated in the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-productdata.png"/>
</imageobject>
<textobject><phrase>3.3 productdata</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>This will bring us back to the Preview Data window where it should look like the one below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-productdata2.png"/>
</imageobject>
<textobject><phrase>3.3 productdata2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Once you click <guibutton>OK</guibutton>, a pop-up window will indicate that there are some temporary artifacts being deployed to the Teiid Server in order to preview the data. Finally, there will be two additional views that will open along the bottom of JBDS. Specifically, the SQL Results and Teiid Execution Plan tab views. A successful execution will yield sample results as indicated in the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.3-query-results.png"/>
</imageobject>
<textobject><phrase>3.3 query results</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_import_metadata_from_the_uscustomers_and_eucustomers_databases">
<title>Import Metadata from the uscustomers and eucustomers Databases</title>
<simpara>We will now create source models that represent the US_Customers and EU_Customers from our databases. We will again import the metadata using the Import Database via JDBC Wizard to create the model. Use the steps from the previous section to import the two schemas. Name the Models US_Customers and EU_Customers and only import the table metadata for the tables account, accountholdings, and customer. The database names for these two sources are uscustomers and eucustomers respectively. The username/password combination is the same as for the product database (postgres / postgres). You will need to create a new Connection Profile for each source but you can reuse the PostgreSQL JDBC driver that was previously referenced. Additionally, feel free to preview data for these two additional data sources using the steps that were outlined above.
When you have completed the imports, the Package Diagram and Model Explorer for US_Customers, for example, will look similar to the following illustration.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.4-US_Customers.png"/>
</imageobject>
<textobject><phrase>3.4 US Customers</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_import_metadata_from_a_flat_file">
<title>Import Metadata from a flat file</title>
<simpara>So far we have been connecting to relational databases and their tables. You can connect to other types of data sources within the perspective. In this section we will connect to a flat file in a CSV (Comma Separated Values) format which contains market information as seen in the image below:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.5-marketdata-csv.png"/>
</imageobject>
<textobject><phrase>3.5 marketdata csv</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>As with the steps above you will need to right-click on the DataSources folder and select import. This time you will select the File Source (Flat) &gt;&gt; Source and View Model to import a data source.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.5-flat-file-import.png"/>
</imageobject>
<textobject><phrase>3.5 flat file import</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click the <guibutton>Next &gt;</guibutton> button. The File Import File Options dialog box will appear.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.5-import-from-flat-file-src.png"/>
</imageobject>
<textobject><phrase>3.5 import from flat file src</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select option Flat file on local file system and click the <guibutton>Next &gt;</guibutton> button.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.5-data-file-source-selection.png"/>
</imageobject>
<textobject><phrase>3.5 data file source selection</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The next screen that is displayed is the dialog box to create a new connection profile. Click on the <guibutton>New&#8230;&#8203;</guibutton> button.
The new connection profile dialog is displayed.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.5-connection-profile.png"/>
</imageobject>
<textobject><phrase>3.5 connection profile</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Type in MarketData for the name and click the <guibutton>Next &gt;</guibutton> button.</simpara>
<simpara>Use the <guibutton>Browse&#8230;&#8203;</guibutton> button (see image below) to locate the folder where the market data CSV file resides. The location should be DVWorkshop/dv_docker/demo. Ensure Use first line as column name indicator is checked. You can click the Test Connection button, it will just ensure that the program can get to the directory specified.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.5-define-folder.png"/>
</imageobject>
<textobject><phrase>3.5 define folder</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click the <guibutton>Next &gt;</guibutton> button. The next dialog is the Summary dialog box that displays what has been selected for this connection so far.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.5-summary.png"/>
</imageobject>
<textobject><phrase>3.5 summary</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click the <guibutton>Finish</guibutton> button to continue. All of the CSV files are listed from the data source folder selected in the previous steps. We want to make sure that the check box is checked beside the marketdata.csv file, the file that you need to connect to. In the Source Model Definition, enter for the model name, MarketData in the Name: field (see image below).</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.5-select-csv.png"/>
</imageobject>
<textobject><phrase>3.5 select csv</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click on the <guibutton>Next &gt;</guibutton> button to continue.</simpara>
<simpara>The next dialog box that opens allows you to select how the CSV file is formatted. In this case, the file is Character delimited (Delimited with a comma). See the image below for the settings that you need to select.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.5-flat-file-column-format.png"/>
</imageobject>
<textobject><phrase>3.5 flat file column format</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click on the <guibutton>Next &gt;</guibutton> button to continue. Next specify the flat file delimited columns parser settings for how the CSV file to be imported. You will change the Datatype of the price column to bigdecimal.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.5-flat-file-column-format2.png"/>
</imageobject>
<textobject><phrase>3.5 flat file column format2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click the <guibutton>Next &gt;</guibutton> button when complete.</simpara>
<simpara>The last step is to specify the View Model Definition (see image below). Enter the data from the image below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.5-view-model-definition.png"/>
</imageobject>
<textobject><phrase>3.5 view model definition</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click on the <guibutton>Finish</guibutton> button to import the model. Your JBDS screen should look similar to the image below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/3.5-view-model-final.png"/>
</imageobject>
<textobject><phrase>3.5 view model final</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Save All. Congratulations, you have now completed this lab.</simpara>
</section>
</chapter>
<chapter xml:id="_create_a_virtual_base_layer">
<title>Create a Virtual Base Layer</title>
<simpara>Beyond the obvious advantages of integrating disparate data sources using an intuitive, easy-to-use technology such as JBoss Data Virtualization, another significant advantage of creating a data services abstraction layer is to provide a level of isolation from the physical sources themselves. By creating a layered set of data service models, from fine-grained to more granular data services, the developer can build a stable data integration layer than can easily adapt to changes in the source systems. This is especially advantageous when the consumers of the data are separate from/have no control of the providers of the data. A recommended best practice to begin building this "future-proof" abstraction layer is to create a Virtual Base Layer (VBL), a one-to-one mapping of each physical source that isolates any future changes that may arise in the data source(s) to a specific transformation in the model. These VBL components can then be used as building blocks for higher level services; all of the transformations built on top of them will not need to be changed should the need arise to accommodate a change in the source(s).</simpara>
<section xml:id="_where_are_we_2">
<title>Where are we?</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-vbl.png"/>
</imageobject>
<textobject><phrase>demo vbl</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_create_a_virtual_base_layer_us_customers_vbl">
<title>Create a virtual base layer: US_Customers_VBL</title>
<simpara>To create a VBL for each of the source metadata models that you have imported, right-click on the VirtualBaseLayer folder that you created earlier and select <menuchoice><guimenu>New</guimenu> <guimenuitem>Teiid Metadata Model</guimenuitem></menuchoice>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/4.1-new-metadata-model.png"/>
</imageobject>
<textobject><phrase>4.1 new metadata model</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Enter US_Customers_VBL as the Model Name, Relational as the Model Class, and View Model as the Model Type. Select “Transform from an existing model” in the Select a model builder panel and click <guibutton>Next</guibutton>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/4.1-new-model-wizard.png"/>
</imageobject>
<textobject><phrase>4.1 new model wizard</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The “Transform from an Existing Model” step of the New Model Wizard will appear.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/4.1-new-model-wizard2.png"/>
</imageobject>
<textobject><phrase>4.1 new model wizard2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click the <guibutton>&#8230;&#8203;</guibutton> to the right of Existing Model and open <menuchoice><guimenu>Financials</guimenu> <guisubmenu>DataSources</guisubmenu> <guimenuitem>US_Customers.xmi</guimenuitem></menuchoice>. Click <guibutton>OK</guibutton>. You will be returned to the New Model Wizard. We are going to copy all model elements so simply click <guibutton>Finish</guibutton> on the screen as indicated below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/4.1-new-model-wizard3.png"/>
</imageobject>
<textobject><phrase>4.1 new model wizard3</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The Package Diagram and Model Explorer for the US_Customers_VBL virtual model will now open in the workspace. Observe that the virtual models are rendered in yellow whereas physical models are rendered in blue. Save the changes to the project (do this periodically as you progress) and note that you can also do previews of the virtual model.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/4.1-package-diagram-window.png"/>
</imageobject>
<textobject><phrase>4.1 package diagram window</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Double-click on the customer table in the US_Customer_VBL model. This will open the Transformation Editor.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/4.1-transformation-editor.png"/>
</imageobject>
<textobject><phrase>4.1 transformation editor</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>The transformation has already been created for you, and as noted above it is a simple one-to-one mapping of the underlying physical source. By building up the data services in layers like this, it allows the designer to keep the transformational logic for each view fairly simple, and complex data transformations are achieved by uses several layers of such views. Now, in a traditional relational database, such a design would have a fairly heavy performance penalty at runtime to deal with all of these layers of views, which is why in a traditional database you&#8217;d see a use case like this defined as a single view defined with a very lengthy and complex SQL statement. The reason this is not an issue with JBoss Data Virtualization is because the Query Engine in the JBoss Data Virtualization Server compresses all of these layers at run time down to a single (potentially highly complex) query that is then optimized to run (in parallel if possible) against the backend data sources. Thus there is no penalty to using layered views with JBoss Data Virtualization.</simpara>
</note>
<note>
<simpara>The "transformation language" in the Transformation Editor is ANSI-standard SQL. We don&#8217;t make you learn a new language to define transformations, you just use normal SQL syntax, which is something that we find most data architects are already fairly comfortable with. We will be spending much more time with the Transformation Editor further on in the lab.</simpara>
</note>
</section>
<section xml:id="_create_the_eu_customers_vbl_and_products_vbl_models">
<title>Create the EU_Customers_VBL and Products_VBL Models</title>
<simpara>Create VBLs for the other two physical models you have imported (Products_VBL and EU_Customers_VBL).
Be sure to create them within the VirtualBaseLayer folder. Right-clicking on the folder to get to the <menuchoice><guimenu>New</guimenu> <guimenuitem>Teiid Metadata Model wizard</guimenuitem></menuchoice>. Save your changes. When you are finished, your project should look like the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/4.2-new-metadata-model.png"/>
</imageobject>
<textobject><phrase>4.2 new metadata model</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Congratulations, you have now completed this lab.</simpara>
</section>
</chapter>
<chapter xml:id="_create_an_enterprise_data_layer">
<title>Create an Enterprise Data Layer</title>
<simpara>The next layer to build are the models in the EnterpriseDataLayer folder. What these models do is resolve the slight semantic differences between the EU_Customers and US_Customers database tables – for example, the US version includes a field for middle initial only in the customer table where the EU version of the customer table has a corresponding field for middle name. Now, one technique we use here to make resolving the semantic differences a little bit easier here is to convert all of the data types for these tables from the standard SQL datatypes to one of a set of custom datatypes we&#8217;ve defined using JBoss Data Virtualization&#8217;s data dictionary capabilities. This way we can ensure that we get all data for a particular field into the same datatype. It also gives us a guide to resolving any differences in field names between the two.</simpara>
<note>
<simpara>Note that using a domain-specific (or enterprise-wide standard) data dictionary is only a recommendation. There is no hard requirement to define or use a data dictionary but instead do this semantic mediation without one (by manually comparing datatypes and field lengths between the two data sources). Our goal with JBoss Data Virtualization is to not impose any roadblocks for those users that want to get their use cases addressed as rapidly as possible – so we don&#8217;t force any requirement on users to define a data dictionary or a taxonomy or anything like that.</simpara>
</note>
<section xml:id="_where_are_we_3">
<title>Where are we?</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-edl.png"/>
</imageobject>
<textobject><phrase>demo edl</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_import_the_data_dictionary_schema">
<title>Import the Data Dictionary Schema</title>
<simpara>An XML schema containing the definitions of a number of datatypes applicable to the Financial domain used by this lab is located in DVWorkshop/dv_docker/demo. The name of the file is DataDictionary.xsd. We want to import the schema into the Schemas folder that was created in an earlier lab. Perform the following steps.
Right-click on the Schema folder in the Model Explorer and choose <menuchoice><guimenu>Import</guimenu> <guisubmenu>Teiid Designer</guisubmenu> <guimenuitem>XML Schemas</guimenuitem></menuchoice>. Then click the <guibutton>Next &gt;</guibutton> button.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.1-import-xsd.png"/>
</imageobject>
<textobject><phrase>5.1 import xsd</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Choose to import the schema from the file system and click <guibutton>Next &gt;</guibutton>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.1-import-xsd2.png"/>
</imageobject>
<textobject><phrase>5.1 import xsd2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Browse to the DVWorkshop/dv_docker/demo directory. Once the directory is opened in the “From Directory” field, you will be able to select the DataDictionary.xsd file. Then click <guibutton>Finish</guibutton>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.1-import-xsd3.png"/>
</imageobject>
<textobject><phrase>5.1 import xsd3</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>You may get a warning that the Financials/Schemas already exists. Choose yes to overwrite.</simpara>
</section>
<section xml:id="_examine_the_data_dictionary">
<title>Examine the Data Dictionary</title>
<simpara>Double-click on the DataDictionary.xsd file you just imported to open the XML Schema viewer. This is a very basic viewer that allows you to see the design model, the source (note the tabs at the bottom), and choose any of the data types to view it&#8217;s properties (in the Properties tab to the bottom-left). The schema can be edited/created here, but most customers use XML-specific tooling to create these files.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.2-Data-Dictionary.png"/>
</imageobject>
<textobject><phrase>5.2 Data Dictionary</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_create_the_eu_customers_edl_enterprise_data_layer">
<title>Create the EU_Customers_EDL Enterprise Data Layer</title>
<simpara>Create a new virtual metadata model called EU_Customers_EDL in the EnterpriseDataLayer folder. Right-click on the folder EnterpriseDataLayer and select <menuchoice><guimenu>New</guimenu> <guimenuitem>Teiid Metadata Model</guimenuitem></menuchoice> to bring up the New Model Wizard and make the following selections as indicated in the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.3-new-model.png"/>
</imageobject>
<textobject><phrase>5.3 new model</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>Next &gt;</guibutton> to go the next step of the New Model Wizard.</simpara>
<simpara>This time, use the EU_Customers_VBL.xmi as the model as the basis for the EU_Customers_EDL model and click <guibutton>OK</guibutton> and then <guibutton>Finish</guibutton>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.3-new-model2.png"/>
</imageobject>
<textobject><phrase>5.3 new model2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>We are going to use the database schema of the eucustomers database as the standard upon which to base our enterprise model. Therefore we won&#8217;t be changing any of the table names or column names, but we will be modifying the transformation to incorporate our Data Dictionary. When we get to the transformations for the US_Customers_EDL and EU_Customers_EDL models we will see that more changes will be necessary to make them semantically align with our enterprise model.
Open the transformation Editor for the customer table of EU_Customers_EDL by double-clicking on it. Select CustomerID and note that there is a Datatype field in the Properties Panel on the lower left.</simpara>
<simpara>Click on the value field to the right of datatype in the Properties Panel in the lower left-hand side of JBDS.
When clicking in this field in the Properties Panel, the Select a Datatype Wizard is presented. The User-Defined Types were populated when we imported the DataDictionary.xsd schema. Browse through the datatypes, check and un-check the boxes to see which types are built-in and which are user-defined.</simpara>
<simpara>In the “Select a Datatype” window choose CustomerID user-defined type for the CustomerID column and click <guibutton>OK</guibutton>. You can begin typing the name of the datatype in the top window to filter the selection types displayed.
Go through this exercise with every column in the Customer table choosing the appropriate datatype for each. Be sure to save your work. At the completion of the exercise, your Customer table should look like the one below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.3-select-datatype.png"/>
</imageobject>
<textobject><phrase>5.3 select datatype</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.3-select-datatype2.png"/>
</imageobject>
<textobject><phrase>5.3 select datatype2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Perform the same process for the other tables (Account, AccountHoldings) in the EU_Customers_EDL model. A way to "go back" to the parent model is to right-click on the teal background surrounding the View model and select "Show Parent Diagram". Alternatively, you can select the table you want to work with by double-clicking on it in the Model Explorer tree-view.
Note: however when you save your changes the following warnings appear in the Transformation Editor:
The SELECT transformation is valid, but NOT fully reconciled:
The transformation output types do not match the target attribute types.
This is because some of the enterprise datatypes we have chosen do not match the underlying format of the source data (AccountID, for example we are defining as a long, but it is a bigdecimal in the source).
To address these type mismatches we will open the Reconciler. This is done by clicking on the small icon just to the right of "Supports Update" in the Transformation Editor.</simpara>
<simpara>Clicking on the Reconciler for Account brings up the following view.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.3-reconciler.png"/>
</imageobject>
<textobject><phrase>5.3 reconciler</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>The highlighted fields indicate some problems. We can address all of these in one go by clicking on the <guibutton>Type Resolver&#8230;&#8203;</guibutton> button. That will bring up the following wizard.</simpara>
</note>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.3-reconciler2.png"/>
</imageobject>
<textobject><phrase>5.3 reconciler2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select each mapping at the top and see that the proposed transformation at the bottom changes. This is under the SQL Symbol panel; we want to convert to the datatype that is assigned to the enterprise datatype. (The Virtual Target Attribute section of the wizard above lets you modify that datatype; we don&#8217;t want to do that here.)
Note that there are three different type mappings being handled here: bigdecimal to long, timestamp to date, and bigdecimal to float. We are not worried about precision in this case, so we can simply press the <guibutton>Convert all source SQL symbol datatypes</guibutton>, followed by clicking <guibutton>OK</guibutton>. This will return you to the Reconciler.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.3-reconciler2a.png"/>
</imageobject>
<textobject><phrase>5.3 reconciler2a</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>The SQL has been re-written in the transformation to handle all the type conversions. Click <guibutton>OK</guibutton> on the Reconciler to finish the process and to return to the Transformation editor.</simpara>
</note>
<simpara>Now go back and perform the same steps with the accountholdings table.
If we were worried about precision, we could take any number of steps to refine/modify the transformation including coding it by hand in the Transformation Editor, using one of the large set of out-of-the-box functions provided with the product, or by creating our own User-Defined function.</simpara>
<simpara>When you are finished with the accountholdings table, it will look like the following.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.3-reconciler3.png"/>
</imageobject>
<textobject><phrase>5.3 reconciler3</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_create_the_us_customers_edl_enterprise_data_layer">
<title>Create the US_Customers_EDL Enterprise Data Layer</title>
<simpara>Now that we have finished with building the first enterprise data service layer in our model, we can take a short-cut to creating the same type of model for the US_Customers model. Essentially we are going to use the EU_Customers_EDL model as a template for creating the US_Customers_EDL model, and then replace the sources of the transformations for each of the tables with the correct ones.
Here is how to do it:
Right-click on the EnterpriseDataLayer folder and select <menuchoice><guimenu>New</guimenu> <guimenuitem>Teiid Metadata Model</guimenuitem></menuchoice>. Fill in the wizard with the following fields (below) and click <guibutton>Next</guibutton>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.4-newmodel.png"/>
</imageobject>
<textobject><phrase>5.4 newmodel</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>In the “New Model Wizard” window choose the EU_Customers_EDL.xmi model in the EnterpriseDataLayer folder and click <guibutton>OK</guibutton> followed by <guibutton>Next &gt;</guibutton> and <guibutton>Finish</guibutton>. Your selection should be as indicated below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.4-newmodel2.png"/>
</imageobject>
<textobject><phrase>5.4 newmodel2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Open the Transformation Editor on US_Customers_EDL.customer. See figure below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.4-newmodel3.png"/>
</imageobject>
<textobject><phrase>5.4 newmodel3</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Note that the Source of the transformation is the EU_Customers_EDL.customer table. We want to replace that with the US_Customers_VBL.customer table. Right-click on the Source table and select <guimenu>Remove Transformation Source(s)</guimenu>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.4-removetransformsrc.png"/>
</imageobject>
<textobject><phrase>5.4 removetransformsrc</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The following pop-up window will be presented.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.4-removetransformsrcconfirm.png"/>
</imageobject>
<textobject><phrase>5.4 removetransformsrcconfirm</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>OK</guibutton>. The following illustration indicates what your view in Teiid Designer should now resemble.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.4-teiiddesigner.png"/>
</imageobject>
<textobject><phrase>5.4 teiiddesigner</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select the VirtualBaseLayer &#8594; US_Customers_VBL &#8594; customer table and drag &amp; drop the table in the Sources swim lane of the US_Customers_EDL window. This is highlighted in the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.4-VBL.png"/>
</imageobject>
<textobject><phrase>5.4 VBL</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>There will be an error on our current model, US_Customers_EDL. At this point, we need to add a source model. Simply drag the highlighted customer table indicated in the previous illustration to the sources column on the right-hand side. This will add this table from our VirtualBaseLayer to our US_Customers_EDL model.</simpara>
<simpara>As is indicated on the model, the transformation is valid but is not fully reconciled. Click on the reconciler to bring up the wizard. As you can see from the reconciler, we have a bit of work to do.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.4-reconcile.png"/>
</imageobject>
<textobject><phrase>5.4 reconcile</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>There are two things that we need to do in order to fix this transformation.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Assign (Bind) variables that do not automatically match. By selecting the source on the left and the target on the right, we can then bind each of the following:</simpara>
<itemizedlist>
<listitem>
<simpara>ssn to customerid</simpara>
</listitem>
<listitem>
<simpara>middleinitial to middlename</simpara>
</listitem>
<listitem>
<simpara>streetaddress1 to streetaddress</simpara>
</listitem>
<listitem>
<simpara>aptnumber to streetaddress2</simpara>
</listitem>
<listitem>
<simpara>state to stateprovince</simpara>
</listitem>
<listitem>
<simpara>zipcode to postalcode</simpara>
</listitem>
<listitem>
<simpara>phone to phonenumber (be sure to assign this on the left too and not map it to country!)</simpara>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
<simpara>When we are finished, we have one more step.</simpara>
<orderedlist numeration="arabic" startingnumber="2">
<listitem>
<simpara>Create a (simple) function to assign a value to Country as it does not exist in the source. To do this we will open up the Expression Builder by clicking on the "f(x)" button. This is right under the "&lt; Null" button in the middle area of the wizard. Since all that is needed is a simple (static) assignment, the Expression Builder comes up with the following screen.</simpara>
</listitem>
</orderedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.4-expression-builder.png"/>
</imageobject>
<textobject><phrase>5.4 expression builder</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>All we need to do is type "USA" into the Value field, click <guibutton>Apply</guibutton>, then <guibutton>OK</guibutton>. However, while you are in the Expression Builder, you may want to select the Function radio button to check out the many out-of-the-box functions and operations that ship with JBoss Data Virtualization. When you are finished, be sure to set it back to Constant and complete the instructions as outlined above.</simpara>
<simpara>When the Expression Builder exits back into the Reconciler, you will notice that the function ('USA' AS Country) has been properly assigned.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.4-expression-builder2.png"/>
</imageobject>
<textobject><phrase>5.4 expression builder2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>OK</guibutton> in the Reconciler and save your changes.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/5.4-expression-builder3.png"/>
</imageobject>
<textobject><phrase>5.4 expression builder3</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Now perform the same process with the other two tables (account and accountholdings). Delete the EU_Customers_EDL.account &amp; EU_Customers_EDL.accountholdings source and drag &amp; drop the appropriate US_Customers_VBL.account &amp; US_Customers_VBL.accountholdings source model and perform any necessary reconciliations. Again, you can go through the required steps to Preview data that was outlined in an earlier lab.
The Data Dictionary has also enterprise data types defined for Product data. Create a Products_EDL model in the EnterpriseDataLayer folder, source it from the Products_VBL model, and correct the datatypes in the Products_EDL model. Finally, reconcile any datatype conversion issues.</simpara>
<simpara>Congratulations, you have now completed this lab.</simpara>
</section>
</chapter>
<chapter xml:id="_create_a_federated_data_layer">
<title>Create a Federated Data Layer</title>
<simpara>Now that we have created our Virtual Base Layer (to isolate us from changes in the sources), defined an enterprise data dictionary to semantically reconcile the various terminologies in our disparate data sources, and created an Enterprise Data Layer that captures those mappings, we are ready to integrate some different data sources. And, since we have the ground work already, it could not be simpler.</simpara>
<section xml:id="_where_are_we_4">
<title>Where are we?</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-fdl.png"/>
</imageobject>
<textobject><phrase>demo fdl</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_create_a_federated_data_layer_2">
<title>Create a Federated Data Layer</title>
<simpara>Right-click on the Financials Project and go <menuchoice><guimenu>New</guimenu> <guimenuitem>Folder</guimenuitem></menuchoice> to create a new folder called “FederatedDataLayer”.
Create a new Teiid Metadata Model in this folder called “All_Customers". Create it by transforming it from the EU_Customers_EDL model. Your new model wizard should look like the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/6.1-newmodel.png"/>
</imageobject>
<textobject><phrase>6.1 newmodel</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>After clicking the <guibutton>Next</guibutton> button, be sure to select the EU_Customers_EDL.xmi model as indicated below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/6.1-newmodel2.png"/>
</imageobject>
<textobject><phrase>6.1 newmodel2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Now, open up the Transformation Editor for All_Customers.customer. In the Model Explorer on the left, open up the FederatedDataLayer &#8594; All_Customers model and highlight the customer table as indicated in the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/6.1-transformation-editor.png"/>
</imageobject>
<textobject><phrase>6.1 transformation editor</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select the customer table of the EU_Customers_EDL view model in the Transformation Editor.
NOTE: Several new icons have been activated in the middle tool bar. Click on the fourth one down on the middle tool bar. If you hover your mouse over the label it reads "Add Union Transformation Source(s)". It is possible that you may have to click this button twice for the action to occur. This will add the customer table from US_Customers_EDL to the All_Customers model. Additionally, the "T" icon will now have a small "U" to the lower-right indicating that there is a union that is responsible for this transformation. Now, all that is required is to save the model. That is it! You now have a union of two tables from two separate databases. In order to view the result, be sure the customer table is highlighted in the Model Explorer under the FederatedDataLayer. This is indicated in the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/6.1-transformation-editor2.png"/>
</imageobject>
<textobject><phrase>6.1 transformation editor2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>With the All_Customers.customer table highlighted in the Model Explorer, the "Running Man" icon is now enabled. This icon is located on the toolbar directly below the Model Explorer tab. Click on this icon to preview the data of the combined EU customer and US customer database tables. If for some reason this does not work, select the Preview Data Action on the right-hand side of JBDS that was utilized in earlier labs to preview the data.
Now that the exercise for federating the customer table is complete, give it a try for the other two tables, account and accountholdings. Clearly, this is a simple example where we assume that the entries in the uscustomers database and the eucustomers database do not overlap. But, JBoss Data Virtualization is capable of very sophisticated modeling and transformations.</simpara>
<simpara>Congratulations, you have now completed this lab.</simpara>
</section>
</chapter>
<chapter xml:id="_create_a_web_service">
<title>Create a Web service</title>
<simpara>In this lab, you will be utilizing the Teiid Designer and JBDS to create a Web service. It should be noted that this lab is not a guide on Web services or how or when to use them. Rather, this is an instructional approach for some of the advanced capabilities of Teiid Designer.</simpara>
<section xml:id="_where_are_we_5">
<title>Where are we?</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-ws.png"/>
</imageobject>
<textobject><phrase>demo ws</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_create_a_web_service_2">
<title>Create a Web service</title>
<simpara>To begin, right-click on the All_Customers.xmi model in the FederatedDataLayer folder and select option <menuchoice><guimenu>Modeling</guimenu> <guimenuitem>Create Web Service</guimenuitem></menuchoice>. This is indicated in the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/7-createws.png"/>
</imageobject>
<textobject><phrase>7 createws</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/7-createwsmenuoption.png"/>
</imageobject>
<textobject><phrase>7 createwsmenuoption</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>This will bring up the following wizard.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/7-createws2.png"/>
</imageobject>
<textobject><phrase>7 createws2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>In order to keep things organized, be sure to select “Browse” and select the WebServices folder we created in an earlier lab. This will drop all web service artifacts within this folder. Then, click <guibutton>Finish</guibutton>. If the generation was successful, the following result will occur.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/7-generate-ws.png"/>
</imageobject>
<textobject><phrase>7 generate ws</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The generated Web Service will open after clicking <guibutton>OK</guibutton>. Your Teiid Designer view should resemble that below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/7-Teiid-designer.png"/>
</imageobject>
<textobject><phrase>7 Teiid designer</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>If not selected, be sure to click on the “getcustomer” operation as indicated below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/7-Teiid-designer2.png"/>
</imageobject>
<textobject><phrase>7 Teiid designer2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>With the getcustomer operation highlighted, click the “Running man icon with a diamond T”. This icon is located across the top of the All_Customers_WS.xmi view and to the right of the Operation Editor. Click this icon to bring up the following window.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/7-preview-data.png"/>
</imageobject>
<textobject><phrase>7 preview data</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>When initially opened, the customerid : CustomerID field will be blank. Enter in the value "CST01033". Then, click <guibutton>OK</guibutton>.</simpara>
<simpara>Upon inspection of the Result1 tab reveals the XML output of the Web Service invocation as indicated below.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;account_Output:customer_Output 		xmlns:account_Output="http://www.metamatrix.com/account_Output" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;customer_Output_Instance&gt;
		&lt;customerid&gt;CST01033&lt;/customerid&gt;
		&lt;firstname&gt;Alexander&lt;/firstname&gt;
		&lt;lastname&gt;Franken&lt;/lastname&gt;
		&lt;middlename&gt;Horst&lt;/middlename&gt;
		&lt;streetaddress&gt;Berliner Platz 85&lt;/streetaddress&gt;
		&lt;streetaddress2 xsi:nil="true"/&gt;
		&lt;city&gt;Munich&lt;/city&gt;
		&lt;stateprovince xsi:nil="true"/&gt;
		&lt;postalcode&gt;80806&lt;/postalcode&gt;
		&lt;country&gt;Germany&lt;/country&gt;
		&lt;phonenumber&gt;0890877435&lt;/phonenumber&gt;
	&lt;/customer_Output_Instance&gt;
&lt;/account_Output:customer_Output&gt;</programlisting>
<simpara>Congratulations, you have now completed this lab.</simpara>
</section>
</chapter>
<chapter xml:id="_virtual_database_deployment">
<title>Virtual Database Deployment</title>
<simpara>We have been doing all of our querying directly through the Preview interface of Teiid Designer, but in order to make our data services available to external clients, we will need to package them up into a Virtual DataBase (VDB), the deployable artifact that drives the run-time behavior of the server. It is exactly analogous to a WAR or an EAR file; once created it can simply be dropped into the deploy directory of a running server (with JBoss Data Virtualization installed) and the Teiid Server process will hot-deploy the data services modeled within it. The process is very simple.</simpara>
<section xml:id="_where_are_we_6">
<title>Where are we?</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-vdb.png"/>
</imageobject>
<textobject><phrase>demo vdb</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_create_the_vdb_metadata_model">
<title>Create the VDB Metadata Model</title>
<simpara>Right-click on the Financials project (top layer folder in the Model Explorer) and select <menuchoice><guimenu>New</guimenu> <guimenuitem>Teiid VDB</guimenuitem></menuchoice>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.1-new-teiid-vdb.png"/>
</imageobject>
<textobject><phrase>8.1 new teiid vdb</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>This will open the New VDB wizard. The New VDB wizard is part of the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.1-new-vdb-wizard.png"/>
</imageobject>
<textobject><phrase>8.1 new vdb wizard</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Enter a VDB Name, “Financials”. Next, click the <guibutton>Add</guibutton> button in order to select the model(s) to add to the VDB. Next, select the <guibutton>Add</guibutton> button so we can select a model(s) to add to the VDB.Models wizard as indicated in the illustration below. This will bring up the Select Models window.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.1-select-models.png"/>
</imageobject>
<textobject><phrase>8.1 select models</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>For this lab, we will select the Financials → FederatedDataLayer → All_Customers.xmi model and click the <guibutton>OK</guibutton> button. Your New VDB wizard should look like the illustration below. At this point, click the <guibutton>Finish</guibutton> button.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.1-new-vdb.png"/>
</imageobject>
<textobject><phrase>8.1 new vdb</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>This will now open the VDB Viewer in Teiid Designer. Your view should look like the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.1-Teiid-Designer.png"/>
</imageobject>
<textobject><phrase>8.1 Teiid Designer</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>All models, virtual and physical (as well as the DataDictionary schema we used) have been brought into the VDB. This is because the Query Engine will need all of the models and their associated metadata/transformations, in order to drive the run-time behavior. However, that does not mean that the data services developer is forced to expose all of these more granular data services if they should choose not to.
Indeed it is a best practice to at least completely hide the source data systems, to prevent users of the virtual layer from going directly to the sources. In this way JBoss Data Virtualization can add additional layers of security and authorization/authentication to protect sensitive data.
To illustrate this, uncheck the boxes in the second column (annotated with the magnifying glass icon) on the physical models. This will make them invisibile/unavailable to any client connecting to this VDB. The models are still there (and must be, for the rest of the federation to work), but they cannot be accessed other than through the higher-level data services that have been defined.</simpara>
</note>
<simpara>Here is what the view should look like with the physical source visibility turned off. Specifically, the EU_Customers.xmi and the US_Customers.xmi have their visibility turned off.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.1-Teiid-Designer2.png"/>
</imageobject>
<textobject><phrase>8.1 Teiid Designer2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Be sure to "Save All" to save all of the changes to the VDB.</simpara>
</section>
<section xml:id="_create_data_sources_on_the_jboss_data_virtualization_server">
<title>Create data sources on the JBoss Data Virtualization server</title>
<simpara>There is one thing we need to do before we deploy the VDB to the server. We need to install the data sources into the JBoss Data Virtualization server&#8217;s deploy directory. This can be done in a number of ways. If we have the DataSource-ds.xml file we can simply drop it into the deploy directory. Note however that the JNDI name that the VDB expects must match. The JNDI name the VDB expects is in a column named JNDI Name. For this example, the JNDI names are EU_Customers and US_Customers and are derived automatically from the Source model name. This column is visible in the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.2-Teiid-Designer.png"/>
</imageobject>
<textobject><phrase>8.2 Teiid Designer</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>We can also use Teiid Designer to pass the data source information that we captured in our model on to the Server. Not doing this automatically is an intentional security feature. To begin creating the required data sources, we need to ensure that the Teiid Panel is open. The panel is located in the Teiid tab along the bottom portion of JBDS. In fact, this is a "view" into the Teiid Instance that we created a connection to in an earlier lab. In the Teiid tab, there will be a top-level folder called JBoss Data Virtualization 6.1. Again, this name will be the name that you used in an earlier lab when we were connecting to this instance. Below the top-level folder, there are two additional folders, Data Sources and VDBs. The view of this tab can be seen in the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.2-Teiid-instance.png"/>
</imageobject>
<textobject><phrase>8.2 Teiid instance</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Once complete, you should note that these data sources are already available, along with some of the internal sources used by JBoss Data Virtualization. Your Data Sources view should look like that below.</simpara>
<simpara>At this point, we are ready to deploy the VDB to the server. This could not be easier. Simply right-click on Financials VDB model and select Modeling &#8594; Deploy.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.2-VDB-Modeling.png"/>
</imageobject>
<textobject><phrase>8.2 VDB Modeling</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.2-VDB-Deploy.png"/>
</imageobject>
<textobject><phrase>8.2 VDB Deploy</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Before the VDB will be deployed the Create VDB Data Source dialogue window appears to create a data source automatically for the VDB or to skip it.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.2-VDB-Create-DataSource.png"/>
</imageobject>
<textobject><phrase>8.2 VDB Create DataSource</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>After the VDB is deployed one can check the Data Sources in the Server tab of JBDS, see below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.2-DS-view.png"/>
</imageobject>
<textobject><phrase>8.2 DS view</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>Create Source</guibutton> to create a data source for the Financials VDB.</simpara>
<simpara>Now the deployment of the VDB will begin in the running Teiid Server instance. Now, open up a browser and point it to <link xlink:href="http://localhost:8080">http://localhost:8080</link>. This will open the console for administrative services for the JBoss Data Virtualization server. Click on "Administration Console". This is displayed in the illustration below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.2-Admin-console.png"/>
</imageobject>
<textobject><phrase>8.2 Admin console</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Once the console is open, verify that the VDB has been deployed. Along the left-hand pane there is a Virtual Databases menu option. By clicking this option, we can see that the Financials VDB has been successfully deployed. By following the illustration below, click tab Models, you should be able to see the deployed data services.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.2-Admin-console2.png"/>
</imageobject>
<textobject><phrase>8.2 Admin console2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Upon closer inspection, you will notice that there is a "1" that has been appended to the VDB. This is simply the version number of the VDB. This enables you to deploy multiple versions of a VDB and have them accessible by your applications.</simpara>
</section>
<section xml:id="_dependency_diagrams">
<title>Dependency Diagrams</title>
<simpara>There is a very useful feature for modeling in the Teiid Designer. Right-click on the All_Customers.customer table and select Modeling → Show Dependency Diagram.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.3-dependency-diagram.png"/>
</imageobject>
<textobject><phrase>8.3 dependency diagram</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Then, choose the Outline view. This is the tab that is right next to the Model Explorer tab in the left-hand pane of JBDS. If the Outline View is not visible, simply enable it by going to <menuchoice><guimenu>Window</guimenu> <guisubmenu>Show View</guisubmenu> <guimenuitem>Outline</guimenuitem></menuchoice>. Finally, select the <guibutton>Show Diagram Overview</guibutton> button.
This is the button located right under the Outline tab. You should see something like the following illustration.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/8.3-outline-view.png"/>
</imageobject>
<textobject><phrase>8.3 outline view</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>You can scroll the "viewfinder" on the left in the Outline view to navigate the model on the right. You can also hover your mouse over the transformations (the diamond-shaped "T" nodes) on the right to examine the content of the transformations.</simpara>
</note>
<simpara>This capability is helpful for navigating among large, complicated models, and also shows the provenance/lineage of any selected data service. As was noted at the beginning, there is tremendous power and reusablility that results from the ability to create data service layers without a performance penalty.</simpara>
<simpara>Congratulations, you have now completed this lab.</simpara>
</section>
</chapter>
<chapter xml:id="_consuming_web_services_as_data_sources">
<title>Consuming Web Services as Data Sources</title>
<simpara>In this lab you will be using the Teiid Designer to consume Web Services. This lab is not a guide on Web Services, on how or when to use or create Web Services, but an instructional approach for some of the capabilities of Teiid Designer to consume Web Services as a datasource.
In this lab you will create the CountryInfoService.xmi and CountryInfoServiceView.xmi models. These will be created from the existing WSDL available from the following URL:</simpara>
<simpara><link xlink:href="http://www.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL">http://www.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL</link></simpara>
<section xml:id="_where_are_we_7">
<title>Where are we?</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-ws-ds.png"/>
</imageobject>
<textobject><phrase>demo ws ds</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_create_relational_model_from_soap_web_service">
<title>Create relational model from SOAP web service</title>
<simpara>Using the importer for the creation of query-able relational procedures that represent your desired request and response web service structure defined through your SOAP web service definition.</simpara>
<simpara>Right-click on the DataSources folder and select Import&#8230;&#8203; from the right-hand menu.
The Import dialog box is opened.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import.png"/>
</imageobject>
<textobject><phrase>10.2 import</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select Web Service Source &gt;&gt; Source and View Model (SOAP) located under the Teiid Designer folder from the import source list that is displayed in the Import dialog box. Click the <guibutton>Next &gt;</guibutton> button to continue. The Create Relational Model from Web Service Dialog box opens.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import-soap.png"/>
</imageobject>
<textobject><phrase>10.2 import soap</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Since there are no Web Service Profiles configured one need to create a new one.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import-soap2.png"/>
</imageobject>
<textobject><phrase>10.2 import soap2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click on the <guibutton>New&#8230;&#8203;</guibutton> button to create a new Connection Profile. The New Connection Profile dialog opens.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-new-connection-profile.png"/>
</imageobject>
<textobject><phrase>10.2 new connection profile</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Type CountryInfo in the Name field and click the <guibutton>Next &gt;</guibutton> button.
The New Connection Profile dialog box opens.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-new-connection-profile3.png"/>
</imageobject>
<textobject><phrase>10.2 new connection profile3</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The WSDL that you will connect to is a URL. Click on the <guibutton>URL&#8230;&#8203;</guibutton> button to enter a URL.
The WSDL URL dialog box opens.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-new-connection-profile4.png"/>
</imageobject>
<textobject><phrase>10.2 new connection profile4</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>In the WSDL URL field enter in the following URL:</simpara>
<simpara><link xlink:href="http://www.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL">http://www.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL</link></simpara>
<simpara>The WSDL has no security so leave the Security Type to default of None. Click the <guibutton>OK</guibutton> button. When you click the <guibutton>OK</guibutton> button the software will validate the URL.</simpara>
<note>
<simpara>You will need an internet connection for this to validate correctly.</simpara>
</note>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-new-connection-profile5.png"/>
</imageobject>
<textobject><phrase>10.2 new connection profile5</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click on the <guibutton>Test Connection</guibutton> button to test the URL.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-new-connection-profile6.png"/>
</imageobject>
<textobject><phrase>10.2 new connection profile6</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click on the <guibutton>Next &gt;</guibutton> button.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-new-connection-profile7.png"/>
</imageobject>
<textobject><phrase>10.2 new connection profile7</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click on the <guibutton>Next &gt;</guibutton> button.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-new-connection-profile8.png"/>
</imageobject>
<textobject><phrase>10.2 new connection profile8</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The Summary window will appear. Click <guibutton>Finish</guibutton> to go the Source and WSDL Operations Definition.</simpara>
<simpara>The connection to the WSDL will return the WSDL Operations that are available. This first page involves defining your WSDL source connection profile. Select port (if multiple available), service mode (PAYLOAD vs MESSAGE) and check the operations you wish to use to generate your queryable relational procedures.
Click on the <guibutton>Deselect All</guibutton> button to deselect all of the WSDL Operations. Click on the Operations: CountryName and the FullCountryInfo, to select.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-select-wsdl-operations.png"/>
</imageobject>
<textobject><phrase>10.3 select wsdl operations</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click on the <guibutton>Next &gt;</guibutton> button.</simpara>
<simpara>The Create Relational Model from Web Service dialog is displayed. This page allows you to define the source and target models where the generated procedures will be defined in. Notice that the Name fields for the Source and View model are populated. Based on initial workspace selection, the location for these models may be preset but changeable and the source and view model names will be generated based on the service name. Select the browse button <guibutton>&#8230;&#8203;</guibutton> to select locations and existing models in your workspace.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-select-wsdl-operations2.png"/>
</imageobject>
<textobject><phrase>10.3 select wsdl operations2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select the DataSources folder for the generated source model and VirtualBaseLayer folder for the generated view model and rename the view model to CountryInfo_VBL.
Choose User-specified Procedures and click the <guibutton>Next &gt;</guibutton> button.</simpara>
<simpara>In the next few steps add in the Element Info for both the CountryInfo and FullCountryInfo operations. Use the Operations combo selector at the top to switch between the operations.
In the Request tab, select and double-click the schema elements you wish to set as input parameters for your request. These will be added to the Element Info panel and the resulting generated SQL statement will be updated to reflect the new element. If the selected service mode for this procedure is set to MESSAGE, the HEADER tab will be enabled and allow you to define the SOAP header variables utilizing the same schema tree.
Select the Operation from the Operations pull-down (CountryInfo and FullCountryInfo). Add in the Schema Contents element by selecting the element in the left-hand side and clicking the Add button on the right-hand side. Repeat these actions for both the Request and Response tabs. See image below for further clarification.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-select-wsdl-operations3.png"/>
</imageobject>
<textobject><phrase>10.3 select wsdl operations3</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-select-wsdl-operations4.png"/>
</imageobject>
<textobject><phrase>10.3 select wsdl operations4</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-select-wsdl-operations5.png"/>
</imageobject>
<textobject><phrase>10.3 select wsdl operations5</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-select-wsdl-operations6.png"/>
</imageobject>
<textobject><phrase>10.3 select wsdl operations6</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-select-wsdl-operations7.png"/>
</imageobject>
<textobject><phrase>10.3 select wsdl operations7</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-select-wsdl-operations8.png"/>
</imageobject>
<textobject><phrase>10.3 select wsdl operations8</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-select-wsdl-operations9.png"/>
</imageobject>
<textobject><phrase>10.3 select wsdl operations9</phrase></textobject>
</mediaobject>
</informalfigure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-select-wsdl-operations10.png"/>
</imageobject>
<textobject><phrase>10.3 select wsdl operations10</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>This wizard generates both request and response procedures that are used in the query-able wrapped procedure. If you wish to generate Designer&#8217;s legacy create and extract procedures choose the Legacy Procedures option in the lower section and click <guibutton>Finish</guibutton>.</simpara>
</note>
<simpara>Click on the <guibutton>Finish</guibutton> button.
A status screen is displayed while the models are being created.
The models will appear in the Model Explorer and will be open in the right-hand pane.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-select-wsdl-operations11.png"/>
</imageobject>
<textobject><phrase>10.3 select wsdl operations11</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click the <guibutton>Save All</guibutton> button to save your models.</simpara>
<simpara>Double-click on the CountryName procedure to open the transformation view for the procedure.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-country-name-view.png"/>
</imageobject>
<textobject><phrase>10.3 country name view</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click on the <guibutton>Preview Data</guibutton> button to preview the data.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-preview-data-iso.png"/>
</imageobject>
<textobject><phrase>10.3 preview data iso</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Enter in a country code, such as AU for Australia, to retrieve the data.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-preview-data-iso2.png"/>
</imageobject>
<textobject><phrase>10.3 preview data iso2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click the <guibutton>OK</guibutton> button.
View the SQL Status and Result1 tab to see the results returned from the procedure.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.3-SQL-results.png"/>
</imageobject>
<textobject><phrase>10.3 SQL results</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Try returning other ISO country codes such as CA, BM, BR, etc. The ISO country codes can be found at the following URL:</simpara>
<simpara><link xlink:href="http://userpage.chemie.fu-berlin.de/diverse/doc/ISO_3166.html">http://userpage.chemie.fu-berlin.de/diverse/doc/ISO_3166.html</link></simpara>
<simpara>Save and close the models.</simpara>
</section>
<section xml:id="_create_relational_model_from_rest_service">
<title>Create relational model from REST service</title>
<simpara>Using the importer for the creation of query-able relational procedures that represent your desired request and response web service structure defined through your REST web service definition.
We are going to use an online Weather REST service to get the temperature of a particular city in the world.</simpara>
<simpara>The Weather Info REST service can be found here: <link xlink:href="http://openweathermap.org/">http://openweathermap.org/</link></simpara>
<simpara>Right-click on the DataSources folder and select <guimenu>Import&#8230;&#8203;</guimenu> from the right-hand menu.
The Import dialog box is shown.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import.png"/>
</imageobject>
<textobject><phrase>10.2 import</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select Web Service Source &gt;&gt; Source and View Model (REST) located under the Teiid Designer folder from the import source list that is displayed in the Import dialog box.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import-rest.png"/>
</imageobject>
<textobject><phrase>10.2 import rest</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click the <guibutton>Next &gt;</guibutton> button to continue. The Create Relational Model from Web Service Dialog box opens.
Since there are no REST Web Service Sources configured one need to create a new one. Click on the <guibutton>New&#8230;&#8203;</guibutton> button to create a new Connection Profile. The New Connection Profile dialog opens.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import-rest2.png"/>
</imageobject>
<textobject><phrase>10.2 import rest2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Type WeatherInfo in the Name field and click <guibutton>Next &gt;</guibutton> to get the Web Service Connection Properties dialog.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import-rest4.png"/>
</imageobject>
<textobject><phrase>10.2 import rest4</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>In the Connection URL field type: <link xlink:href="http://api.openweathermap.org/data/2.5/find">http://api.openweathermap.org/data/2.5/find</link></simpara>
<simpara>Add the following two parameters:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Default Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>q</simpara></entry>
<entry align="left" valign="top"><simpara>Query</simpara></entry>
<entry align="left" valign="top"><simpara>London,uk</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>units</simpara></entry>
<entry align="left" valign="top"><simpara>Query</simpara></entry>
<entry align="left" valign="top"><simpara>metric</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Click <guibutton>Test Connection</guibutton> to test the defined REST service. If successfully click <guibutton>Next &gt;</guibutton> to see the Summary of the Connection Profile we just created.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import-rest5.png"/>
</imageobject>
<textobject><phrase>10.2 import rest5</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>Finish</guibutton> to view the REST Web Service Source Selection dialog.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import-rest6.png"/>
</imageobject>
<textobject><phrase>10.2 import rest6</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Place the Source Model definition into the DataSources folder and name it WeatherInfoService.
Place the View Model definition into the VirtualBaseLayer folder and name it WeatherInfo_VBL.
Type in the New View Procedure Name field: WeatherInfoProcedure</simpara>
<simpara>Click <guibutton>Next &gt;</guibutton> to view the XML Data File Import Option dialog.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import-rest7.png"/>
</imageobject>
<textobject><phrase>10.2 import rest7</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>We would like to retrieve the temperature from this WeatherInfo REST service, so select the temp element as shown in the figure below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import-rest8.png"/>
</imageobject>
<textobject><phrase>10.2 import rest8</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>Finish</guibutton> to complete the creation of the the WeatherInfo view model and should get a similar display as shown below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import-rest9.png"/>
</imageobject>
<textobject><phrase>10.2 import rest9</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click the Running man icon in the Transformation Editor pane. This will show the following Preview Data dialog to enter the parameters to the WeatherInfo REST service.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import-rest10.png"/>
</imageobject>
<textobject><phrase>10.2 import rest10</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Type the following values in the Input Parameters fields:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>q</simpara></entry>
<entry align="left" valign="top"><simpara>London,uk</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>units</simpara></entry>
<entry align="left" valign="top"><simpara>metric</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Click <guibutton>Ok</guibutton> to run the virtual procedure in the WeatherInfo_VBL view model with the above parameters to get the temperature of London, UK.
You should a similar screen as shown below:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/10.2-import-rest11.png"/>
</imageobject>
<textobject><phrase>10.2 import rest11</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Save and close the models.</simpara>
<simpara>Congratulations, you have now completed this lab.</simpara>
</section>
</chapter>
<chapter xml:id="_connecting_to_a_virtual_database">
<title>Connecting to a Virtual Database</title>
<section xml:id="_jdbc">
<title>JDBC</title>
<simpara>Java Database Connectivity (JDBC) is an application to database connectivity tool. This Application Program Interface (API) enables communication between applications written in Java and data stored in databases providing methods for data querying and updating.
JDBC is very similar to Open Database Connectivity (ODBC).</simpara>
<simpara>JBoss Data Virtualization provides an API that builds on Java Database Connectivity (JDBC), allowing client applications to issue SQL queries against deployed virtual databases (VDBs).</simpara>
<simpara>URLs used when establishing a connection using the driver class have the following format:</simpara>
<programlisting language="bash" linenumbering="unnumbered">jdbc:teiid:VDB-NAME@mm[s]://HOSTNAME:PORT;[prop-name=prop-value;]*</programlisting>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Variable Name</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>VDB-NAME</simpara></entry>
<entry align="left" valign="top"><simpara>The name of the virtual database (VDB) to which the application is connected.
</simpara><simpara>IMPORTANT: VDB names can contain version information; for example, myvdb.2. If such a name is used in the URL, this has the same effect as supplying a version=2 connection property.
</simpara><simpara>Note that if the VDB name contains version information, you cannot also use the version property in the same request.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>mm[s]</simpara></entry>
<entry align="left" valign="top"><simpara>The JBoss Data Virtualization JDBC protocol. mm is the default for normal connections. mms uses SSL for encryption and is the default for the AdminAPI tools.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>HOSTNAME</simpara></entry>
<entry align="left" valign="top"><simpara>The server where JBoss Data Virtualization is installed.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>PORT</simpara></entry>
<entry align="left" valign="top"><simpara>The port on which JBoss Data Virtualization is listening for incoming JDBC connections.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>[prop-name=prop-value]</simpara></entry>
<entry align="left" valign="top"><simpara>Any number of additional name-value pairs can be supplied in the URL, separated by semi-colons. Property values must be URL encoded if they contain reserved characters, for example, ?, =, and ;.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section xml:id="_where_are_we_8">
<title>Where are we?</title>

</section>
<section xml:id="_how_to_access_the_data">
<title>How to access the data</title>
<simpara>When you have successfully deployed the Financials VDB into the JBoss Data Virtualization server, the JDBC protocol support is provided by the JBoss Data Virtualization server by using the Teiid JDBC driver. The Teiid JDBC driver which resided in teiid-8.7.1.6_2-redhat-6-jdbc.jar can be found in $EAP_HOME/dataVirtualization/jdbc directory.</simpara>
<simpara>The Teiid JDBC driver can be used in JDBC client tools like <link xlink:href="http://squirrel-sql.sourceforge.net/">Squirrel</link> or <link xlink:href="https://www.dbvis.com/">DBVisualizer</link> etc..</simpara>
<simpara>The following steps are used to setup the connection using the Teiid JDBC driver in DBVisualizer.</simpara>
<simpara>Start DBVisualizer</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-jdbc-dbv.png"/>
</imageobject>
<textobject><phrase>demo jdbc dbv</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select <menuchoice><guimenu>Tools</guimenu> <guimenuitem>Driver Manager&#8230;&#8203;</guimenuitem></menuchoice></simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-jdbc.dm.png"/>
</imageobject>
<textobject><phrase>demo jdbc.dm</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Create a new driver by clicking on Create a new driver button, <inlinemediaobject>
<imageobject>
<imagedata fileref="images/demo-jdbc-dbv-ad-button.png"/>
</imageobject>
<textobject><phrase>demo jdbc dbv ad button</phrase></textobject>
</inlinemediaobject>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-jdbc-dbv-ad.png"/>
</imageobject>
<textobject><phrase>demo jdbc dbv ad</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Close the Driver Manager windows.
Since we have setup the Teiid JDBC driver we can now create a database connection to the Financials VDB using the driver previously created.</simpara>
<simpara>Create a new database connection by clicking on Create a new database connection button, <inlinemediaobject>
<imageobject>
<imagedata fileref="images/demo-jdbc-dbv-dbc-button.png"/>
</imageobject>
<textobject><phrase>demo jdbc dbv dbc button</phrase></textobject>
</inlinemediaobject> and select No Wizard.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-jdbc-dbv-dbc.png"/>
</imageobject>
<textobject><phrase>demo jdbc dbv dbc</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select the Teiid driver in the Driver list box and fill in the approriate settings for connecting to the Financials VDB as depicted in the screenshot above.
Try to connect and if the connection is successfully established you can run queries against the models which are exposed by the VDB.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-jdbc-connect.png"/>
</imageobject>
<textobject><phrase>demo jdbc connect</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
</section>
<section xml:id="_odata">
<title>OData</title>
<simpara>The Open Data Protocol (OData) is a Web protocol for querying and updating data that provides a way to unlock your data and free it from silos that exist in applications today. OData does this by applying and building upon Web technologies such as HTTP, Atom Publishing Protocol (AtomPub) and JSON to provide access to information from a variety of applications, services, and stores. OData is used to expose and access information from a variety of sources including, but not limited to, relational databases, file systems, content management systems and traditional Web sites.
OData is consistent with the way the Web works, it makes a deep commitment to URIs for resource identification and commits to an HTTP-based, uniform interface for interacting with those resources (just like the Web). This allows OData to enable a new level of data integration and interoperability across a broad range of clients, servers, services, and tools.
For more information on OData see <link xlink:href="http://www.odata.org">http://www.odata.org</link>.</simpara>
<section xml:id="_where_are_we_9">
<title>Where are we?</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-odata.png"/>
</imageobject>
<textobject><phrase>demo odata</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_how_to_access_the_data_2">
<title>How to access the data</title>
<simpara>When you have successfully deployed the Financials VDB into the JBoss Data Virtualization server, the OData protocol support is implicitly provided by the JBoss Data Virtualization server without any further configuration.
Now, open up a browser and point it to the following URL: <link xlink:href="http://localhost:8080/odata/Financials.1/All_Customers.customer">http://localhost:8080/odata/Financials.1/All_Customers.customer</link>.
If you are requested to type in a username/password enter teiidUser/redhat1!. This is similar to making a JDBC/ODBC connection and issuing a SQL call as</simpara>
<programlisting language="sql" linenumbering="unnumbered">SELECT * FROM All_Customers.customer;</programlisting>
<simpara>The returned results from OData query can be in Atom/AtomPub XML format or JSON format. By default AtomPub based XML result is returned as shown below.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/9.1-OData.png"/>
</imageobject>
<textobject><phrase>9.1 OData</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>To return the results in JSON format use the following URL as shown below:
<link xlink:href="http://localhost:8080/odata/Financials.1/All_Customers.customer?$format=json">http://localhost:8080/odata/Financials.1/All_Customers.customer?$format=json</link></simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/9.1-OData-JSON.png"/>
</imageobject>
<textobject><phrase>9.1 OData JSON</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_how_to_query_the_data">
<title>How to query the data</title>
<simpara>To search for customer with customerid='CST01033' which is the SQL equivalent of</simpara>
<programlisting language="sql" linenumbering="unnumbered">SQL&gt; SELECT * FROM All_Customers.customer WHERE customerid='CST01033';</programlisting>
<simpara>use following URL and it should return the results shown below:
<link xlink:href="http://localhost:8080/odata/Financials.1/All_Customers.customer('CST01033'">http://localhost:8080/odata/Financials.1/All_Customers.customer('CST01033'</link>)</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/9.2-Query.png"/>
</imageobject>
<textobject><phrase>9.2 Query</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Another way to query the data is to use the OData filter system query option using $filter in the URL. The $filter system query option allows clients to filter the set of resources that are addressed by a request URL. $filter specifies conditions that MUST be met by a resource for it to be returned in the set of matching resources.
To search customers from the USA which is the SQL equivalent of</simpara>
<programlisting language="sql" linenumbering="unnumbered">SQL&gt; SELECT * FROM All_Customers.customer WHERE country='USA';</programlisting>
<simpara>use following URL and this should return the results as shown below.
<link xlink:href="http://localhost:8080/odata/Financials.1/All_Customers.customer?$filter=country">http://localhost:8080/odata/Financials.1/All_Customers.customer?$filter=country</link> eq 'USA'</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/9.2-Query2.png"/>
</imageobject>
<textobject><phrase>9.2 Query2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Play around with the OData syntax.</simpara>
<simpara>Congratulations, you have now completed this lab.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_dashboard_builder">
<title>Dashboard Builder</title>
<simpara>The Dashboard Builder is a full featured web application which allows non-technical users to visually create business dashboards. Dashboard data can be extracted from heterogeneous sources of information such as JDBC databases or regular text files. Some ready-to-use sample dashboards are provided for demo and learning purposes.</simpara>
<simpara>It features:</simpara>
<itemizedlist>
<listitem>
<simpara>Visual configuration of dashboards (Drag &amp; Drop).</simpara>
</listitem>
<listitem>
<simpara>Graphical representation of KPIs (Key Performance Indicators).</simpara>
</listitem>
<listitem>
<simpara>Configuration of interactive report tables.</simpara>
</listitem>
<listitem>
<simpara>Data export to Excel and CSV format.</simpara>
</listitem>
<listitem>
<simpara>Filtering and search, both in-memory or SQL based.</simpara>
</listitem>
<listitem>
<simpara>Data extraction from external systems, through different protocols.</simpara>
</listitem>
<listitem>
<simpara>Granular access control for different user profiles.</simpara>
</listitem>
<listitem>
<simpara>Look and feel customization tools.</simpara>
</listitem>
<listitem>
<simpara>Pluggable chart library architecture.</simpara>
</listitem>
</itemizedlist>
<section xml:id="_where_are_we_10">
<title>Where are we?</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/demo-dashboard.png"/>
</imageobject>
<textobject><phrase>demo dashboard</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_dashboard_builder_workflow">
<title>Dashboard Builder Workflow</title>
<simpara>We are creating a Financial Dashboard based on the models of the Federated Data Layer.
The steps of creating a dashboard is described below:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11-dashboard-flow.png"/>
</imageobject>
<textobject><phrase>Dashboard flow</phrase></textobject>
</mediaobject>
</informalfigure>
<itemizedlist>
<listitem>
<simpara>First we need to define an external connection which can be either a flat file or a database</simpara>
</listitem>
<listitem>
<simpara>Next step is to create a data provider based on the external connection. The data provider contains the definition of the data to be displayed in the dashboard.</simpara>
</listitem>
<listitem>
<simpara>A dashboard in Dashboard Builder contains one or more Workspaces</simpara>
</listitem>
<listitem>
<simpara>Each Workspace contains one or more Pages</simpara>
</listitem>
<listitem>
<simpara>Each Page contains one or more Panels</simpara>
</listitem>
<listitem>
<simpara>Each Panel is connected to a component</simpara>
</listitem>
<listitem>
<simpara>There are three component categories</simpara>
<itemizedlist>
<listitem>
<simpara>Dashboard (I.e. HTML editor, KPI)</simpara>
</listitem>
<listitem>
<simpara>Navigation (I.e. Tree menu, Bread crumb, Logout panel&#8230;&#8203;)</simpara>
</listitem>
<listitem>
<simpara>System (I.e. System related components like Data source manager&#8230;&#8203;)</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="_how_this_is_accomplished_in_dashboard_builder">
<title>How this is accomplished in Dashboard Builder</title>
<orderedlist numeration="arabic" startingnumber="1">
<listitem>
<simpara>Start Dashboard Builder</simpara>
</listitem>
</orderedlist>
<simpara>Go to a browser window and type in the following URL</simpara>
<simpara><link xlink:href="http://localhost:8080/dashboard">http://localhost:8080/dashboard</link> and you should see the following screen:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.1-dashboard-login.png"/>
</imageobject>
<textobject><phrase>Dashboard Builder login page</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Login with username/password: dashboardAdmin/redhat1!</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.2-dashboard.png"/>
</imageobject>
<textobject><phrase>11.2 dashboard</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>By default we provide some sample dashboards in the dashboard. Have a look at these sample dashboards first before creating your own dashboard.</simpara>
<orderedlist numeration="arabic" startingnumber="2">
<listitem>
<simpara>Create an external connection</simpara>
</listitem>
</orderedlist>
<simpara>First we are going to create an external connection to be able to get the Financial data into the dashboard.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.3-data-provider.png"/>
</imageobject>
<textobject><phrase>11.3 data provider</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>Make sure that the Showcase workspace is the selected workspace. See top-left corner in picture above.</simpara>
</note>
<simpara>Select the following menu option <menuchoice><guimenu>Administration</guimenu> <guimenuitem>External connections</guimenuitem></menuchoice> and the following screen should appear.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.3-data-provider.connection.png"/>
</imageobject>
<textobject><phrase>11.3 data provider.connection</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Now we have to add a new external connection. Click the <guibutton>+ Create new DataSource</guibutton>.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.3-data-provider.external-connection2.png"/>
</imageobject>
<textobject><phrase>11.3 data provider.external connection2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select JNDI as the type of the datasource and fill in the details of the Financials VDB as shown in the figure above.
To verify the connection details of the datasource click <guibutton>Check DataSource</guibutton>. This will try to connect using the provided connection details.
If the connection is successfully made the following screen should appear:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.3-data-provider.external-connection3.png"/>
</imageobject>
<textobject><phrase>11.3 data provider.external connection3</phrase></textobject>
</mediaobject>
</informalfigure>
<tip>
<simpara>Make sure that the JNDI entry java:/Financials is configured in the JBoss EAP environment and make sure that the Financials VDB is deployed in order to connect successfully.</simpara>
</tip>
<simpara>Click <guibutton>Save</guibutton> to save the external connection.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.3-data-provider.external-connection4.png"/>
</imageobject>
<textobject><phrase>11.3 data provider.external connection4</phrase></textobject>
</mediaobject>
</informalfigure>
<orderedlist numeration="arabic" startingnumber="3">
<listitem>
<simpara>Create a data provider</simpara>
</listitem>
</orderedlist>
<simpara>Next step is to create a data provider based on the previous created external connection. Select <menuchoice><guimenu>Administration</guimenu> <guimenuitem>Data providers</guimenuitem></menuchoice> and the following screen should appear.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.3-create-data-provider.png"/>
</imageobject>
<textobject><phrase>11.3 create data provider</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>To create a new data provider select <guibutton>+ Create new data provider</guibutton>. The following screen should appear:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.3-create-data-provider-query.png"/>
</imageobject>
<textobject><phrase>11.3 create data provider query</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Enter a name for the data provider and select Financials as the Datasource. Furthermore you have to specify the query to get the relevant data from the Financials VDB.
After you have specified the query click <guibutton>Attempt data load</guibutton> to validate the query. If the query is executed successfully the following screen should appear.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.3-create-data-provider-query2.png"/>
</imageobject>
<textobject><phrase>11.3 create data provider query2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>Save</guibutton> to save the data provider definition. The following screen should appear. In this screen one can change the definition of the column names as required by the dashboard.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.3-create-data-provider-query3.png"/>
</imageobject>
<textobject><phrase>11.3 create data provider query3</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Update the column names as necessary and click <guibutton>Save</guibutton>.</simpara>
<orderedlist numeration="arabic" startingnumber="4">
<listitem>
<simpara>Create a workspace</simpara>
</listitem>
</orderedlist>
<simpara>The top bar contains several button options to create the dashboard. The picture below explains the buttons in more detail.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11-dashboard-menu.png"/>
</imageobject>
<textobject><phrase>11 dashboard menu</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>We are ready to create a Financials dashboard based on the Financials data we created in the previous labs.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.4-create-workspace.png"/>
</imageobject>
<textobject><phrase>11.4 create workspace</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>Create workspace</guibutton> to create the Financials workspace.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.4-create-workspace-completed.png"/>
</imageobject>
<textobject><phrase>11.4 create workspace completed</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Now we have completed the creation of the workspace we can add pages to it to create a full functioning dashboard.</simpara>
<orderedlist numeration="arabic" startingnumber="5">
<listitem>
<simpara>Create a page</simpara>
</listitem>
</orderedlist>
<simpara>Now we are going to create our first page in the Financials workspace.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.5-create-page.png"/>
</imageobject>
<textobject><phrase>11.5 create page</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Use the settings as described above.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.5-create-page2.png"/>
</imageobject>
<textobject><phrase>11.5 create page2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Now that the page is successfully created we can add a panel to it.</simpara>
<orderedlist numeration="arabic" startingnumber="6">
<listitem>
<simpara>Add a panel</simpara>
</listitem>
</orderedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.6-add-panel.png"/>
</imageobject>
<textobject><phrase>11.6 add panel</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select component "Tree menu" in the Navigation option and drag and drop the Create panel to the LEFT_TOP region of the page. The page should look similar to the following screen:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.6-add-panel2.png"/>
</imageobject>
<textobject><phrase>11.6 add panel2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Add other components in the same way in the page like:</simpara>
<itemizedlist>
<listitem>
<simpara>"Logout panel" in the HEADER_RIGHT-TOP region</simpara>
</listitem>
<listitem>
<simpara>"HTML Editor" in the CENTER_1 region</simpara>
</listitem>
</itemizedlist>
<simpara>The HTML editor component provides the functionality (free HTML) o create a nice landing page in the dashboard.</simpara>
<orderedlist numeration="arabic" startingnumber="7">
<listitem>
<simpara>Add KPI</simpara>
</listitem>
</orderedlist>
<simpara>Select component Key Performance Indicator in the Dashboard option and drag and drop the Create panel to the CENTER_2 region. The page should look similar to the following screen:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.7-add-kpi.png"/>
</imageobject>
<textobject><phrase>11.7 add kpi</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Select FinancialsData as the Data provider.
Type a name in the KPI&#8217;s name field.
Select Country for Domain aka X Axis.
Select CustomerId for Range aka Y Axis.
Select Value for Sort Interval By.
Select Ascendant for Sort Order.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.7-add-kpi2.png"/>
</imageobject>
<textobject><phrase>11.7 add kpi2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Now try to add some extra pages/panels yourself.</simpara>
</section>
<section xml:id="_financials_dashboard_demo">
<title>Financials Dashboard Demo</title>
<simpara>Existing dashboards can exported/imported in Dashboard Builder. To showcase the Dashboard Builder features, we provide a sample Financials Dashboard.</simpara>
<orderedlist numeration="arabic" startingnumber="1">
<listitem>
<simpara>Import Workspace</simpara>
</listitem>
</orderedlist>
<simpara>Go to the Showcase workspace as the active workspace. Select <menuchoice><guimenu>Administration</guimenu> <guimenuitem>Import and Export</guimenuitem></menuchoice> and the following screen appears.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.8-import.png"/>
</imageobject>
<textobject><phrase>11.8 import</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click the Export/Import Workspaces tab and the following screen should appear.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.8-import-ws.png"/>
</imageobject>
<textobject><phrase>11.8 import ws</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click the <guibutton>Choose file</guibutton> in the Import region. Select the 2-WorkspaceFinancials.cex file in the DVWorkshop/dv-docker/demo/dashboard directory.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.8-import-ws2.png"/>
</imageobject>
<textobject><phrase>11.8 import ws2</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>Import</guibutton>. In the next screen you get the Select objects to import step. Make sure WORKSPACE: 0 is selected.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.8-import-ws3.png"/>
</imageobject>
<textobject><phrase>11.8 import ws3</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>Import</guibutton> in the Select objects to import region. The import of the workspace should be successful and the screen should look like the following.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.8-import-ws-finish.png"/>
</imageobject>
<textobject><phrase>11.8 import ws finish</phrase></textobject>
</mediaobject>
</informalfigure>
<orderedlist numeration="arabic" startingnumber="2">
<listitem>
<simpara>Import Dashboards</simpara>
</listitem>
</orderedlist>
<simpara>Select the Showcase workspace as the active workspace. Select <menuchoice><guimenu>Administration</guimenu> <guimenuitem>Import and Export</guimenuitem></menuchoice> and the following screen appears.
Click the <guibutton>Choose file</guibutton> in the Import dashboards region. Select the 3-CustomerReports.kpiex file in the DVWorkshop/dv-docker/demo/dashboard directory.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.8-import-dash1.png"/>
</imageobject>
<textobject><phrase>11.8 import dash1</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Click <guibutton>Import</guibutton>. The import of the dashboard should be successful and the screen should like the following.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.8-import-dash1a.png"/>
</imageobject>
<textobject><phrase>11.8 import dash1a</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Repeat these steps for the other two dashboards:</simpara>
<itemizedlist>
<listitem>
<simpara>4-AccountReports.kpiex</simpara>
</listitem>
<listitem>
<simpara>5-AccountHoldings.kpiex</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic" startingnumber="3">
<listitem>
<simpara>Financials Demo Dashboard</simpara>
</listitem>
</orderedlist>
<simpara>Since we imported the workspace and the corresponding dashboard into the Financials Demo workspace we can now show the dashboard.
Select the Financials Demo workspace as the active workspace. In the navigation menu select <guimenu>Demo Dashboards</guimenu> and in this menu option we should have three menu items.</simpara>
<orderedlist numeration="arabic" startingnumber="1">
<listitem>
<simpara>Customer Reports</simpara>
</listitem>
</orderedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.8-show-custrep.png"/>
</imageobject>
<textobject><phrase>11.8 show custrep</phrase></textobject>
</mediaobject>
</informalfigure>
<orderedlist numeration="arabic" startingnumber="2">
<listitem>
<simpara>Account Reports</simpara>
</listitem>
</orderedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.8-show-accrep.png"/>
</imageobject>
<textobject><phrase>11.8 show accrep</phrase></textobject>
</mediaobject>
</informalfigure>
<orderedlist numeration="arabic" startingnumber="3">
<listitem>
<simpara>Account Holdings Reports</simpara>
</listitem>
</orderedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/11.8-show-acchrep.png"/>
</imageobject>
<textobject><phrase>11.8 show acchrep</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Navigate through the dashboards and discover how it is setup. Dashboard Builder provides a very easy way to visualize your data.</simpara>
<simpara>Congratulations, you have now completed this lab.</simpara>
</section>
</chapter>
</book>